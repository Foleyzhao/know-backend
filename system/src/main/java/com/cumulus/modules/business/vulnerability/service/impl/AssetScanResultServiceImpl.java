package com.cumulus.modules.business.vulnerability.service.impl;

import com.cumulus.modules.business.entity.Asset;
import com.cumulus.modules.business.repository.AssetRepository;
import com.cumulus.modules.business.vulnerability.entity.AssetScanResult;
import com.cumulus.modules.business.vulnerability.entity.ScanPlan;
import com.cumulus.modules.business.vulnerability.entity.ScanResult;
import com.cumulus.modules.business.vulnerability.repository.AssetScanResultRepository;
import com.cumulus.modules.business.vulnerability.service.AssetScanResultService;
import com.cumulus.modules.business.vulnerability.service.ScanPlanService;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.transaction.Transactional;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * 单个任务结果表 接口实现类
 *
 * @author : shenjc
 */
@Service
@Slf4j
public class AssetScanResultServiceImpl implements AssetScanResultService {

    /**
     * 单个扫描结果数据接口
     */
    @Autowired
    private AssetScanResultRepository assetScanResultRepository;

    /**
     * 扫描任务服务层
     */
    @Autowired
    private ScanPlanService scanPlanService;

    /**
     * 资产数据接口
     */
    @Autowired
    private AssetRepository assetRepository;

    @Override
    public void updateEndAssetScanReason(String ip, Long scanResultId, List<String> vulIdList) {
        updateAssetScanStatus(ip, scanResultId, AssetScanResult.STATUS_END, AssetScanResult.RESULT_SUCCESS, null, vulIdList);
    }

    @Override
    public void updateErrorAssetScanReason(String ip, Long scanResultId, Integer scanResult, Integer failType, Map<String, Object> extra) {
        extra.put("type", failType);
        updateAssetScanStatus(ip, scanResultId, AssetScanResult.STATUS_END, scanResult, extra, null);
    }

    @Override
    public void updateAssetScanStatus(String ip, Long scanResultId, Integer status, Integer result, Map<String, Object> extra, List<String> vulIdList) {
        if (StringUtils.isBlank(ip) || null == scanResultId) {
            if (log.isInfoEnabled()) {
                log.info("updateAssetScanStatus required parameters has null");
            }
        }
        AssetScanResult assetScanResult = findByIpAndScanResultId(ip, scanResultId);
        if (null == assetScanResult) {
            if (log.isInfoEnabled()) {
                log.info("updateAssetScanStatus AssetScanResult not find");
            }
            return;
        }
        if (null != status) {
            assetScanResult.setStatus(status);
        }
        if (null != result) {
            assetScanResult.setResult(result);
        }
        if (null != extra && !extra.isEmpty()) {
            if (assetScanResult.getExtra() == null || assetScanResult.getExtra().isEmpty()) {
                assetScanResult.setExtra(extra);
            } else {
                assetScanResult.getExtra().putAll(extra);
            }
        }
        if (null != vulIdList && !vulIdList.isEmpty()) {
            if (assetScanResult.getVulnerabilityIdList() == null || assetScanResult.getVulnerabilityIdList().isEmpty()) {
                assetScanResult.setVulnerabilityIdList(vulIdList);
            } else {
                assetScanResult.getVulnerabilityIdList().addAll(vulIdList);
            }
        }
        assetScanResultRepository.save(assetScanResult);
    }

    @Override
    @Transactional(rollbackOn = Exception.class)
    public void createAssetScanResultList(Long planId) {
        ScanPlan scanPlan = scanPlanService.getScanPlanById(planId);
        if (scanPlan == null) {
            throw new RuntimeException("任务不存在");
        }
        if (scanPlan.getRunningOrLastResultId() == null) {
            throw new RuntimeException("任务不存在");
        }
        ScanResult scanResult = new ScanResult();
        scanResult.setId(scanPlan.getRunningOrLastResultId());
        List<Asset> assetList;
        switch (scanPlan.getScanType()) {
            case ScanPlan.SCAN_TYPE_ALL: {
                assetList = assetRepository.findAll();
                break;
            }
            case ScanPlan.SCAN_TYPE_BY_DEPT: {
                assetList = assetRepository.findAllByDeptIn(scanPlan.getScanDept());
                break;
            }
            case ScanPlan.SCAN_TYPE_CUSTOM: {
                assetList = scanPlan.getScanAsset();
                break;
            }
            default: {
                throw new RuntimeException("未获取到可扫描资产");
            }
        }
        if (assetList.isEmpty()) {
            throw new RuntimeException("未获取到可扫描资产");
        }
        Map<String, AssetScanResult> scanAssetMap = new HashMap<>(assetList.size());
        for (Asset asset : assetList) {
            AssetScanResult result = scanAssetMap.get(asset.getIp());
            if (result == null) {
                result = new AssetScanResult();
                result.setScanResult(scanResult);
                result.setIp(asset.getIp());
                result.setStatus(AssetScanResult.STATUS_NOT_STARTED);
                result.setResult(AssetScanResult.RESULT_NOT_STARTED);
                result.setExtra(new HashMap<>(0));
                result.setVulnerabilityIdList(new ArrayList<>());
                scanAssetMap.put(asset.getIp(), result);
            }
        }
        assetScanResultRepository.saveAll(scanAssetMap.values());
    }

    @Override
    public void createAssetScanResultWebSit(String webSite, Long scanResultId) {
        ScanResult scanResult = new ScanResult();
        scanResult.setId(scanResultId);
        AssetScanResult result = new AssetScanResult();
        result.setScanResult(scanResult);
        result.setIp(webSite);
        result.setStatus(AssetScanResult.STATUS_NOT_STARTED);
        result.setResult(AssetScanResult.RESULT_NOT_STARTED);
        result.setExtra(new HashMap<>(0));
        result.setVulnerabilityIdList(new ArrayList<>());
        assetScanResultRepository.save(result);
    }

    @Override
    public List<AssetScanResult> findAllByScanResultId(Long scanResultId) {
        if (scanResultId == null) {
            return new ArrayList<>();
        }
        ScanResult scanResult = new ScanResult();
        scanResult.setId(scanResultId);
        return assetScanResultRepository.findAllByScanResult(scanResult);
    }

    @Override
    public Integer countAllByScanResultAndResultEnd(Long scanResultId) {
        if (null == scanResultId) {
            return null;
        }
        ScanResult scanResult = new ScanResult();
        scanResult.setId(scanResultId);
        List<Integer> resultList = new ArrayList<>();
        resultList.add(AssetScanResult.RESULT_SUCCESS);
        resultList.add(AssetScanResult.RESULT_FAIL_CANCEL);
        return assetScanResultRepository.countAllByScanResultAndResultIn(scanResult, resultList);
    }

    @Override
    public Integer countAllByScanResultAndResultScanning(Long scanResultId) {
        if (null == scanResultId) {
            return null;
        }
        ScanResult scanResult = new ScanResult();
        scanResult.setId(scanResultId);
        List<Integer> resultList = new ArrayList<>();
        resultList.add(AssetScanResult.RESULT_NOT_STARTED);
        resultList.add(AssetScanResult.RESULT_RUNNING);
        return assetScanResultRepository.countAllByScanResultAndResultIn(scanResult, resultList);
    }

    @Override
    public AssetScanResult findByIpAndScanResultId(String ip, Long scanResultId) {
        ScanResult scanResult = new ScanResult();
        scanResult.setId(scanResultId);
        List<AssetScanResult> list = assetScanResultRepository.findAllByIpAndScanResult(ip, scanResult);
        if (list.isEmpty()) {
            return null;
        }
        return list.get(0);
    }
}
