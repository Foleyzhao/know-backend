package com.cumulus.modules.business.vulnerability.repository;

import com.cumulus.modules.business.vulnerability.entity.Scan;
import com.cumulus.modules.business.vulnerability.entity.ScanPlan;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;

import javax.transaction.Transactional;
import java.io.IOException;
import java.util.Collection;
import java.util.Date;
import java.util.List;

/**
 * 扫描计划数据访问接口
 *
 * @author zhaoff
 */
public interface ScanPlanRepository extends JpaRepository<ScanPlan, Long>,
        JpaSpecificationExecutor<ScanPlan> {

    /**
     * 分页获取扫描计划
     *
     * @param scanSpecification 查询参数
     * @param pageable          分页
     * @return 扫描计划
     */
    @Override
    Page<ScanPlan> findAll(Specification<ScanPlan> scanSpecification, Pageable pageable);

    /**
     * 更新扫描计划状态
     *
     * @param status 执行状态
     */
    @Modifying
    @Transactional(rollbackOn = IOException.class)
    @Query(nativeQuery = true, value = "update tbl_vulnerability_scan_plan set status = ?1")
    void updatePlanStatus(int status);

    /**
     * 更新扫描计划状态
     *
     * @param status 状态
     * @param id     id
     */
    @Modifying
    @Transactional(rollbackOn = IOException.class)
    @Query(nativeQuery = true, value = "update tbl_vulnerability_scan_plan set status = ?1 WHERE id = ?2")
    void updatePlanStatus(int status, Integer id);

    /**
     * 根据 scan id 查询列表
     *
     * @param scanner 扫描器
     * @return 返回列表
     */
    List<ScanPlan> findAllByScanner(Scan scanner);


    /**
     * 根据名称查询列表
     *
     * @param builtIn  是否内置
     * @param planName 名称
     * @param planId   任务id
     * @return 返回列表
     */
    @Query(nativeQuery = true, value = "select count(*) from tbl_vulnerability_scan_plan where name = ?1 and built_in = ?2 " +
            "and if(?3 != '', id  <> ?3, 1 = 1)")
    Integer countAllByNameAndBuiltInAndIdNot(String planName, boolean builtIn, Long planId);

    /**
     * 根据id进行批量删除
     *
     * @param listId id主键列表
     */
    @Modifying
    @Transactional(rollbackOn = IOException.class)
    @Query(nativeQuery = true, value = "delete from tbl_vulnerability_scan_plan where id in ( ?1 )")
    void deleteBatches(List<Integer> listId);

    /**
     * 查询在某些状态的任务
     *
     * @param status 状态列表
     * @return 返回列表
     */
    List<ScanPlan> findAllByStatusIn(Collection<Integer> status);

    /**
     * 查询全部超时的任务 任务状态不为3（结束）且关联的扫描结果为启动时间小于指定时间（超时）的任务
     *
     * @param minStartTime 最小启动时间
     * @return 返回列表
     */
    @Query(nativeQuery = true, value = "select DISTINCT sp.* from tbl_vulnerability_scan_plan sp " +
            "LEFT JOIN tbl_vulnerability_scan_result sr on sp.running_or_last_result_id = sr.id " +
            "where sp.`status` <> 3 and (sr.start_time is null or sr.start_time < ?1)")
    List<ScanPlan> findAllTimeOutPlan(Date minStartTime);
}
