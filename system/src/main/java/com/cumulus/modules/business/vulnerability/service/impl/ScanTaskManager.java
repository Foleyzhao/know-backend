package com.cumulus.modules.business.vulnerability.service.impl;

import com.cumulus.exception.BadRequestException;
import com.cumulus.modules.business.vulnerability.dto.ScanTaskRequest;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * 漏扫任务管理中心
 *
 * @author zhaoff
 */
@Slf4j
@Service
public class ScanTaskManager {

    /**
     * 扫描任务运行器
     */
    @Autowired
    private ScanTaskRunner taskRunner;

    /**
     * 立即执行扫描请求
     *
     * @param planId 扫描请求
     */
    public void runNow(Long planId) {
        ScanTaskRequest request = new ScanTaskRequest();
        request.setPlanId(planId);
        taskRunner.runAsync(request);
    }

    /**
     * 暂停扫描请求
     *
     * @param planId 扫描请求 ID
     */
    public void pauseNow(Long planId) {
        if (planId == null) {
            throw new BadRequestException("参数有误,暂停失败");
        }
        ScanTaskRequest request = taskRunner.getScanTaskRequest(planId);
        if (request == null) {
            throw new BadRequestException("参数有误,暂停失败");
        }
        taskRunner.pauseScanTask(request);
    }

    /**
     * 重启扫描请求
     *
     * @param planId 扫描请求 ID
     */
    public void restartNow(Long planId) {
        if (planId == null) {
            throw new BadRequestException("参数有误,暂停失败");
        }
        ScanTaskRequest request = taskRunner.getScanTaskRequest(planId);
        if (request == null) {
            throw new BadRequestException("参数有误,暂停失败");
        }
        taskRunner.restartScanTask(request);
    }

    /**
     * 立即停止执行扫描请求
     *
     * @param planId 扫描请求 ID
     */
    public void stopNow(Long planId) {
        if (planId == null) {
            throw new BadRequestException("参数有误,停止失败");
        }
        ScanTaskRequest request = taskRunner.getScanTaskRequest(planId);
        if (request == null) {
            request = new ScanTaskRequest();
            request.setPlanId(planId);
        }
        taskRunner.cancelScanTask(request);
    }
}
