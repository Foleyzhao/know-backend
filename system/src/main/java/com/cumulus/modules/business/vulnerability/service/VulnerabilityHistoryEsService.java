package com.cumulus.modules.business.vulnerability.service;

import com.cumulus.modules.business.vulnerability.common.model.BuiltInVulReceiveModel;
import com.cumulus.modules.business.vulnerability.entity.es.VulnerabilityEs;

import java.util.List;

/**
 * 漏洞处置服务接口
 *
 * @author : shenjc
 */
public interface VulnerabilityHistoryEsService {

    /**
     * 新发现漏洞
     *
     * @param vulId 漏洞id
     */
    void vulNewDiscovery(String vulId);

    /**
     * 更新漏洞处置状态
     *
     * @param vulId           漏洞id
     * @param reason          原因
     * @param handleUser      操作的用户
     * @param vulHandleStatus 漏洞对象上的下个状态
     * @param vulActionCode   漏洞历史的操作方式 比如提交复测是个 vulActionCode 但是 复测通过(3)和不通过(0) 是 vulHandleStatus
     */
    void vulUpdateHandleStatus(String vulId, String reason, Long handleUser, Integer vulHandleStatus, Integer vulActionCode);

    /**
     * 添加复测回报信息
     *
     * @param model 回报信息
     */
    void addRetestMessage(BuiltInVulReceiveModel model);

    /**
     * 发送扫描复测
     *
     * @param vulIdList 漏洞Id列表
     * @return 返回成功发送的结果
     */
    int vulRetest(List<String> vulIdList);

    /**
     * 根据操作码获取全部漏洞
     *
     * @param vulActionCode 操作码
     * @return 返回列表
     */
    List<VulnerabilityEs> getAllVulByActionCode(Integer vulActionCode);

    /**
     * quartz 用定时处理扫描复测方法
     */
    void scanRetestTask();

    /**
     * quartz 用定时清理扫描复测方法
     */
    void scanRetestMapClean();

    /**
     * 根据id删除vul
     *
     * @param vulId 漏洞id
     */
    void delete(String vulId);
}
