package com.cumulus.modules.business.vulnerability.support;

import com.cumulus.enums.ScanProduct;
import com.cumulus.modules.business.entity.Asset;
import com.cumulus.modules.business.entity.AssetExtend;
import com.cumulus.modules.business.repository.AssetRepository;
import com.cumulus.modules.business.service.AssetService;
import com.cumulus.modules.business.vulnerability.common.model.BuiltInPolicyModel;
import com.cumulus.modules.business.vulnerability.common.model.BuiltInVulReceiveModel;
import com.cumulus.modules.business.vulnerability.common.model.BuiltInVulSendModel;
import com.cumulus.modules.business.vulnerability.common.service.impl.VulSendBean;
import com.cumulus.modules.business.vulnerability.dto.ScanTaskRequest;
import com.cumulus.modules.business.vulnerability.entity.AssetScanResult;
import com.cumulus.modules.business.vulnerability.entity.Scan;
import com.cumulus.modules.business.vulnerability.entity.es.VulnerabilityEs;
import com.cumulus.modules.business.vulnerability.service.AssetScanResultService;
import com.cumulus.modules.business.vulnerability.service.impl.ScanTaskRunner;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.concurrent.LinkedBlockingQueue;

/**
 * 内置引擎的处理器
 *
 * @author : shenjc
 */
@Slf4j
@Component
public class EngineScanProvider extends AbstractVulnerabilityScanProvider {

    /**
     * 采集任务任务队列
     */
    private static final LinkedBlockingQueue<BuiltInVulReceiveModel> MESSAGE_QUEUE = new LinkedBlockingQueue<>();

    /**
     * 内置扫描任务结果解析线程名
     */
    private static final String RESOLVE_THREAD_NAME = "built-in-vul-result-resolve";

    /**
     * 用于区分网址和主机漏洞
     */
    public static final String WEB_TYPE_MARK = "http";

    /**
     * mq发送服务
     */
    @Autowired
    private VulSendBean vulSendBean;

    /**
     * 资产数据接口
     */
    @Autowired
    private AssetRepository assetRepository;

    /**
     * 资产服务接口
     */
    @Autowired
    private AssetService assetService;

    /**
     * 漏扫任务服务
     */
    @Lazy
    @Autowired
    private ScanTaskRunner scanTaskRunner;

    /**
     * 扫描结果服务
     */
    @Autowired
    private AssetScanResultService assetScanResultService;

    /**
     * 初始化 资产采集线程池
     */
    @PostConstruct
    public void init() {
        // 漏扫任务
        Thread resolveMessageThread = new Thread(() -> {
            //系统刚启动时先不接收数据防止mq存在数据接收后 @Lazy scanTaskRunner 还没有初始化完成就提前调用导致循环依赖
            try {
                Thread.sleep(60 * 1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            while (true) {
                try {
                    BuiltInVulReceiveModel message = MESSAGE_QUEUE.take();
                    resolveMessage(message);
                } catch (Exception e) {
                    if (log.isErrorEnabled()) {
                        log.error("resolveMessageThread error", e);
                    }
                    try {
                        Thread.sleep(1000);
                    } catch (Exception ex) {
                        if (log.isErrorEnabled()) {
                            log.error("resolveMessageThread sleep error", ex);
                        }
                    }
                }
            }
        });
        resolveMessageThread.setDaemon(true);
        resolveMessageThread.setName(RESOLVE_THREAD_NAME);
        resolveMessageThread.start();
    }

    /**
     * 添加信息
     *
     * @param message 信息
     */
    public static void addMessage(BuiltInVulReceiveModel message) {
        MESSAGE_QUEUE.add(message);
    }

    @Override
    public String getSupportCode() {
        return String.valueOf(ScanProduct.BUILTIN_PRODUCT_ID);
    }

    @Override
    public String createScanTask(ScanTaskRequest request, String ip) {
        return null;
    }

    @Override
    public String createBatchScanTask(ScanTaskRequest request, List<String> scanIpList) {
        //生成BuiltInVulSendModel 中共用的信息
        BuiltInVulSendModel vulSendModel = new BuiltInVulSendModel();
        BuiltInPolicyModel builtInPolicy = new BuiltInPolicyModel(request.getResult().getPolicyId());
        vulSendModel.setPocScan(builtInPolicy.isPocScan());
        vulSendModel.setWeakPassBrute(builtInPolicy.isWeakPassBrute());
        vulSendModel.setVersionMatch(builtInPolicy.isVersionMatch());
        vulSendModel.setId(String.valueOf(request.getPlanId()));
        vulSendModel.setType(BuiltInVulSendModel.DEFAULT_TYPE);
        boolean notSendMessage = true;
        //循环
        for (String ip : scanIpList) {
            List<Asset> assetList;
            //有两种类型的 单ip 和 网页获取资产的方式不同
            if (ip.contains(WEB_TYPE_MARK)) {
                assetList = assetRepository.findAllByWebSite(ip);
            } else {
                assetList = assetRepository.findAllByIp(ip);
            }
            if (assetList.isEmpty()) {
                assetScanResultService.updateEndAssetScanReason(ip, request.getResult().getId(), null);
            } else {
                BuiltInVulSendModel.Fingerprint fingerprint = new BuiltInVulSendModel.Fingerprint();
                for (Asset asset : assetList) {
                    AssetExtend extend = asset.getAssetExtend();
                    if (extend == null) {
                        continue;
                    }
                    if (StringUtils.isNotBlank(extend.getWebsite())) {
                        notSendMessage = false;
                        vulSendModel.setTargets(extend.getWebsite());
                        vulSendModel.setTargetType(BuiltInVulSendModel.TARGET_TYPE_WEB);
                        vulSendModel.setFingerprint(null);
                        //web 不发弱口令检测
                        vulSendModel.setWeakPassBrute(false);
                        vulSendBean.sendRequestForAsyncResponse(vulSendModel);
                        //重新设置弱口令检测
                        vulSendModel.setWeakPassBrute(builtInPolicy.isWeakPassBrute());
                        assetScanResultService.createAssetScanResultWebSit(extend.getWebsite(), request.getResult().getId());
                        assetScanResultService.updateAssetScanStatus(extend.getWebsite(), request.getResult().getId()
                                , AssetScanResult.STATUS_SCANNING, AssetScanResult.RESULT_RUNNING, null, null);
                    }
                    if (StringUtils.isNotBlank(extend.getName())) {
                        final BuiltInVulSendModel.FingerprintDetail fingerprintDetail = new BuiltInVulSendModel.FingerprintDetail();
                        fingerprintDetail.setCpe(extend.getCpe());
                        fingerprintDetail.setName(extend.getName());
                        fingerprintDetail.setVersion(extend.getVersion());
                        fingerprintDetail.setProduct(extend.getProduct());
                        if (AssetExtend.TYPE_TCP.equals(StringUtils.lowerCase(extend.getType()))) {
                            fingerprint.getTcp().put(String.valueOf(asset.getPort()), fingerprintDetail);
                        } else if (AssetExtend.TYPE_UDP.equals(StringUtils.lowerCase(extend.getType()))) {
                            fingerprint.getUdp().put(String.valueOf(asset.getPort()), fingerprintDetail);
                        }
                    }
                }
                //目前没有指纹就存null
                if (!fingerprint.getTcp().isEmpty() || !fingerprint.getUdp().isEmpty()) {
                    vulSendModel.setFingerprint(fingerprint);
                } else {
                    vulSendModel.setFingerprint(null);
                }
                vulSendModel.setTargets(ip);
                vulSendModel.setTargetType(BuiltInVulSendModel.TARGET_TYPE_HOST);
                vulSendBean.sendRequestForAsyncResponse(vulSendModel);
                assetScanResultService.updateAssetScanStatus(ip, request.getResult().getId()
                        , AssetScanResult.STATUS_SCANNING, AssetScanResult.RESULT_RUNNING, null, null);
            }
        }
        if (notSendMessage) {
            scanTaskRunner.tryEndScanTask(request);
        }
        return null;
    }

    @Override
    public void resumeTask(ScanTaskRequest request) {

    }

    @Override
    public void stopOneScanTask(Scan scan, String taskId) throws Exception {

    }

    @Override
    public void getScanResult(ScanTaskRequest request, AssetScanResult asset) {
    }

    @Override
    public List<Map<String, Object>> getStrategies(Scan scanner) throws Exception {
        return null;
    }

    /**
     * 解析mq返回的信息
     *
     * @param message 消息
     */
    private void resolveMessage(BuiltInVulReceiveModel message) {
        if (message == null) {
            return;
        }
        if (StringUtils.isBlank(message.getPlanId()) || StringUtils.isBlank(message.getTargetType())) {
            if (log.isInfoEnabled()) {
                log.info("resolveMessage error message required parameters has null");
            }
        }
        final ScanTaskRequest scanTaskRequest;
        try {
            scanTaskRequest = scanTaskRunner.getScanTaskRequest(Long.parseLong(message.getPlanId()));
        } catch (NumberFormatException e) {
            if (log.isInfoEnabled()) {
                log.info("resolveMessage error message format error planId:{}", message.getPlanId());
            }
            return;
        }
        if (scanTaskRequest == null || scanTaskRequest.getPlanId() == null) {
            if (log.isInfoEnabled()) {
                log.info("resolveMessage error can not find scanTaskRequest or planId");
            }
            return;
        }
        switch (message.getTargetType()) {
            case BuiltInVulSendModel.TARGET_TYPE_HOST: {
                resolveHostMessage(message, scanTaskRequest);
                break;
            }
            case BuiltInVulSendModel.TARGET_TYPE_WEB: {
                resolveWebMessage(message, scanTaskRequest);
                break;
            }
            default: {
                break;
            }
        }
    }

    /**
     * 处理主机资产的信息
     *
     * @param message         mq传来的信息
     * @param scanTaskRequest 任务信息
     */
    private void resolveHostMessage(BuiltInVulReceiveModel message, ScanTaskRequest scanTaskRequest) {
        for (Map.Entry<String, List<BuiltInVulReceiveModel.VulInfo>> entry : message.getResList().entrySet()) {
            String ip = entry.getKey();
            Asset asset = assetService.getHostAssetByIp(ip);
            Long assetId = asset == null ? null : asset.getId();
            List<VulnerabilityEs> vulList = new ArrayList<>();
            if (asset != null) {
                for (BuiltInVulReceiveModel.VulInfo vulInfo : entry.getValue()) {
                    vulList.add(new VulnerabilityEs(asset, vulInfo, VulnerabilityEs.CATEGORY_HOST));
                }
            }
            saveVulList(scanTaskRequest, Collections.singletonList(assetId), ip, vulList, VulnerabilityEs.CATEGORY_HOST);
        }
    }

    /**
     * 处理web资产的信息
     *
     * @param message         mq传来的信息
     * @param scanTaskRequest 任务信息
     */
    private void resolveWebMessage(BuiltInVulReceiveModel message, ScanTaskRequest scanTaskRequest) {
        for (Map.Entry<String, List<BuiltInVulReceiveModel.VulInfo>> entry : message.getResList().entrySet()) {
            String website = entry.getKey();
            Asset asset = assetService.getWebAssetByWebSite(website);
            Long assetId = asset == null ? null : asset.getId();
            List<VulnerabilityEs> vulList = new ArrayList<>();
            if (asset != null) {
                for (BuiltInVulReceiveModel.VulInfo vulInfo : entry.getValue()) {
                    vulList.add(new VulnerabilityEs(asset, vulInfo, VulnerabilityEs.CATEGORY_WEB));
                }
            }
            saveVulList(scanTaskRequest, Collections.singletonList(assetId), website, vulList, VulnerabilityEs.CATEGORY_HOST);
        }
    }
}
