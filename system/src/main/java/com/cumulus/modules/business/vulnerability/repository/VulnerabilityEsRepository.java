package com.cumulus.modules.business.vulnerability.repository;

import java.util.Collection;
import java.util.List;
import java.util.Set;

import com.cumulus.modules.business.vulnerability.entity.es.VulnerabilityEs;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.elasticsearch.repository.ElasticsearchRepository;

/**
 * 漏洞数据访问接口
 *
 * @author zhangxq
 */
public interface VulnerabilityEsRepository extends ElasticsearchRepository<VulnerabilityEs, String> {

    /**
     * 漏洞查重
     *
     * @param assetId   资产id
     * @param vulNumber 漏洞编号
     * @param latest    是否最新
     * @return 个数
     */
    Long countByAssetIdEqualsAndVulNumberEqualsAndLatestEquals(String assetId, String vulNumber, boolean latest);

    /**
     * 根据ip 和类型寻找漏洞
     *
     * @param vulCategory 类别 主机/应用
     * @param ip          ip
     * @param latest      是否最新
     * @return 列表
     */
    List<VulnerabilityEs> findAllByVulCategoryAndIpAndLatestEquals(Integer vulCategory, String ip, boolean latest);

    /**
     * 根据漏洞类型、处理状态、风险等级查询
     *
     * @param vulCategory  漏洞类型
     * @param handleStatus 处理状态
     * @param riskLevel    风险等级
     * @param latest       是否最新
     * @return 数量
     */
    Long countByVulCategoryEqualsAndRiskLevelEqualsAndHandleStatusIsInAndLatestEquals(
            Integer vulCategory, Integer riskLevel, Set<Integer> handleStatus, boolean latest);

    /**
     * 查询漏洞列表
     *
     * @param assetId      资产id
     * @param latest       是否是最新
     * @param handleStatus 处理状态
     * @param pageable     分页
     * @return 返回分页数据
     */
    Page<VulnerabilityEs> findAllByAssetIdAndLatestAndHandleStatusNotIn(String assetId, Boolean latest, Collection<Integer> handleStatus, Pageable pageable);

    /**
     * 查询漏洞列表根据处理状态
     *
     * @param handleStatus 处理状态码列表
     * @return 返回列表
     */
    List<VulnerabilityEs> findAllByHandleStatusIn(Collection<Integer> handleStatus);
}
