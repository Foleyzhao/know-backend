package com.cumulus.modules.business.vulnerability.controller;

import com.cumulus.base.BaseEntity;
import com.cumulus.exception.BadRequestException;
import com.cumulus.modules.business.vulnerability.entity.ScanPlan;
import com.cumulus.modules.business.vulnerability.repository.ScanPlanRepository;
import com.cumulus.modules.business.vulnerability.service.ScanPlanService;
import com.cumulus.utils.CommonUtils;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * 漏扫计划控制层
 *
 * @author zhaoff
 */
@RestController
@RequestMapping(path = "/api/vulnerability/plan")
@Slf4j
@PreAuthorize("@auth.check('vulScan')")
public class ScanPlanController {

    /**
     * 用于区分内置和第三方漏扫的字段
     */
    private static final String BUILT_IN_IS = "builtInIs";

    /**
     * 漏洞扫描服务接口
     */
    @Autowired
    private ScanPlanService scanPlanService;

    /**
     * 漏洞扫描数据接口
     */
    @Autowired
    private ScanPlanRepository scanPlanRepository;

    /**
     * 根据参数查询漏洞扫描计划
     *
     * @param pageable 分页参数
     * @param params   查询参数
     * @return 漏洞扫描计划
     */
    @PostMapping("getPageBuiltIn")
    public ResponseEntity<?> getPageBuiltIn(Pageable pageable,
                                            @RequestBody Map<String, String> params) {
        params.put(BUILT_IN_IS, String.valueOf(true));
        return new ResponseEntity<>(scanPlanService.page(pageable, CommonUtils.mapToMultiValueMap(params)), HttpStatus.OK);
    }

    /**
     * 根据参数查询漏洞扫描计划
     *
     * @param pageable 分页参数
     * @param params   查询参数
     * @return 漏洞扫描计划
     */
    @PostMapping("getPageThirdParty")
    public ResponseEntity<?> getPageThirdParty(Pageable pageable,
                                               @RequestBody Map<String, String> params) {
        params.put(BUILT_IN_IS, String.valueOf(false));
        return new ResponseEntity<>(scanPlanService.page(pageable, CommonUtils.mapToMultiValueMap(params)), HttpStatus.OK);
    }

    /**
     * 根据id查询漏洞扫描计划
     *
     * @param id id
     * @return 扫描计划
     */
    @PostMapping(path = "/{id}")
    public ResponseEntity<?> getScanPlanById(@PathVariable("id") Long id) {
        return new ResponseEntity<>(scanPlanService.getScanPlanById(id), HttpStatus.OK);
    }

    /**
     * 创建漏洞扫描计划
     *
     * @param plan 漏洞扫描计划
     * @return 请求响应
     */
    @PostMapping(path = "/addScanPlan")
    public ResponseEntity<?> addScanPlan(@Validated(BaseEntity.Create.class) @RequestBody ScanPlan plan) {
        scanPlanService.addScanPlan(plan);
        return new ResponseEntity<>("", HttpStatus.OK);
    }

    /**
     * 获取任务的资产数量
     *
     * @param plan 漏洞扫描计划
     * @return 请求响应
     */
    @PostMapping(path = "/getAssetSum")
    public ResponseEntity<?> getAssetSum(@Validated(BaseEntity.Create.class) @RequestBody ScanPlan plan) {
        Long assetSum = scanPlanService.getAssetSum(plan);
        if (assetSum > ScanPlan.PLAN_ASSET_MAX_SUM) {
            throw new BadRequestException(BadRequestException.HINT);
        }
        return new ResponseEntity<>(assetSum, HttpStatus.OK);
    }

    /**
     * 校验扫描任务名称
     *
     * @param scanName 扫描任务
     * @return 请求响应
     */
    @PostMapping(path = "/checkScanPlanName")
    public ResponseEntity<?> checkScanPlanName(String scanName, Boolean builtIn) {
        if (builtIn == null) {
            builtIn = true;
        }
        return new ResponseEntity<>(scanPlanRepository.countAllByNameAndBuiltInAndIdNot(scanName, builtIn, null), HttpStatus.OK);
    }

    /**
     * 更新漏洞扫描计划
     *
     * @param newPlan 新扫描计划
     * @return 请求响应
     */
    @PostMapping(path = "/updateScanPlan")
    public ResponseEntity<?> updateScanPlan(@RequestBody ScanPlan newPlan) {
        ScanPlan oldPlan = scanPlanService.getScanPlanById(newPlan.getId());
        if (oldPlan == null) {
            throw new BadRequestException("任务不存在");
        }
        scanPlanService.updateScanPlan(oldPlan, newPlan);
        return new ResponseEntity<>(HttpStatus.OK);
    }

    /**
     * 删除漏洞扫描计划
     *
     * @param planId 漏洞扫描计划
     * @return 请求响应
     */
    @DeleteMapping(path = "/deleteScanPlan/{id}")
    public ResponseEntity<?> deleteScanPlan(@PathVariable("id") Long planId) {
        ScanPlan plan = scanPlanService.getScanPlanById(planId);
        if (plan == null) {
            throw new BadRequestException("任务不存在");
        }
        scanPlanService.deleteScanPlan(plan);
        return new ResponseEntity<>(HttpStatus.OK);
    }

    /**
     * 批量删除扫描计划
     *
     * @return 请求响应
     */
    @PostMapping(path = "/deleteBatches")
    public ResponseEntity<?> deleteBatches(@RequestBody List<Long> list) {
        if (list.isEmpty()) {
            throw new BadRequestException("漏洞扫描计划,批量删除失败");
        }
        return new ResponseEntity<>(scanPlanService.deleteBatches(list), HttpStatus.OK);
    }

    /**
     * 批量删除扫描计划
     *
     * @return 请求响应
     */
    @PostMapping(path = "/deleteAll")
    public ResponseEntity<?> deleteAll() {
        final List<Long> idList = scanPlanService.findAllScanPlan().stream().map(ScanPlan::getId).collect(Collectors.toList());
        return new ResponseEntity<>(scanPlanService.deleteBatches(idList), HttpStatus.OK);
    }

    /**
     * 查询全部扫描器
     *
     * @return 请求响应
     */
    @GetMapping(path = "/findAllScanPlan")
    public ResponseEntity<?> findAllScanPlan() {
        return ResponseEntity.ok(scanPlanService.findAllScanPlan());
    }
}
