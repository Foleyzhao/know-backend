package com.cumulus.modules.business.vulnerability.controller;

import com.cumulus.exception.BadRequestException;
import com.cumulus.modules.business.vulnerability.common.model.BuiltInPolicyModel;
import com.cumulus.modules.business.vulnerability.entity.Scan;
import com.cumulus.modules.business.vulnerability.repository.ScanRepository;
import com.cumulus.modules.business.vulnerability.service.ScanTaskService;
import com.cumulus.modules.business.vulnerability.service.impl.ScanTaskManager;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;
import java.util.Map;
import java.util.Optional;

/**
 * 漏扫任务管理控制层
 *
 * @author zhaoff
 */
@Slf4j
@RestController
@RequestMapping(path = "/api/vulnerability/manager")
@PreAuthorize("@auth.check('vulScan')")
public class ScanManagerController {

    /**
     * 漏扫任务管理中心
     */
    @Autowired
    private ScanTaskManager scanTaskManager;

    /**
     * 漏洞扫描任务服务接口
     */
    @Autowired
    private ScanTaskService scanTaskService;

    /**
     * 漏洞扫描器数据访问对象
     */
    @Autowired
    private ScanRepository scannerRepository;

    /**
     * 立即执行扫描任务接口
     *
     * @param planId 扫描计划
     * @return 请求结果
     */
    @PostMapping(path = "/runNow/{planId}")
    public ResponseEntity<?> runNow(@PathVariable("planId") Long planId) {
        scanTaskManager.runNow(planId);
        return ResponseEntity.ok().body("启动成功");
    }

    /**
     * 暂停扫描任务接口
     *
     * @param planId 扫描计划
     * @return 请求结果
     */
    @PostMapping(path = "/pauseNow/{planId}")
    public ResponseEntity<?> pauseNow(@PathVariable("planId") Long planId) {
        scanTaskManager.pauseNow(planId);
        return ResponseEntity.ok().body("暂停成功");
    }

    /**
     * 暂停扫描任务接口
     *
     * @param planId 扫描计划
     * @return 请求结果
     */
    @PostMapping(path = "/restartNow/{planId}")
    public ResponseEntity<?> restartNow(@PathVariable("planId") Long planId) {
        scanTaskManager.restartNow(planId);
        return ResponseEntity.ok().body("重启成功");
    }


    /**
     * 立即停止扫描任务接口
     *
     * @param planId 扫描计划
     * @return 请求结果
     */
    @PostMapping(path = "/stopNow/{planId}")
    public ResponseEntity<?> stopNow(@PathVariable("planId") Long planId) {
        scanTaskManager.stopNow(planId);
        return ResponseEntity.ok().body("停止成功");
    }

    /**
     * 获取扫描策略列表 根据扫描器获取 具体的 Provider 发送请求获取策略列表
     *
     * @param scannerId 扫描器ID
     * @return 扫描策略列表
     */
    @PostMapping(path = "/getPoliciesThirdParty/{scannerId}")
    public ResponseEntity<?> getPoliciesThirdParty(@PathVariable("scannerId") Long scannerId) {
        List<Map<String, Object>> responseData;
        if (null == scannerId) {
            throw new BadRequestException("扫描器不存在");
        }
        final Optional<Scan> scanOpt = scannerRepository.findById(scannerId);
        if (!scanOpt.isPresent()) {
            if (log.isInfoEnabled()) {
                log.info("scanner not exist for id: " + scannerId);
            }
            throw new BadRequestException("扫描器不存在");
        }
        try {
            responseData = scanTaskService.getStrategies(scanOpt.get());
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(e.getMessage());
        }
        return new ResponseEntity<>(responseData, HttpStatus.OK);
    }

    /**
     * 根据策略id 获取内置扫描器的策略
     *
     * @param model 策略实体
     * @return 扫描策略列表
     */
    @PostMapping(path = "/getPoliciesBuiltIn")
    public ResponseEntity<?> getPoliciesBuiltIn(@RequestBody BuiltInPolicyModel model) {
        return new ResponseEntity<>(model, HttpStatus.OK);
    }

    /**
     * 获取扫描器
     *
     * @return 扫描器
     */
    @GetMapping(path = "/getName")
    public ResponseEntity<?> getName() {
        List<Map<String, Object>> responseData;
        try {
            responseData = scanTaskService.getName();
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(e.getMessage());
        }
        return ResponseEntity.ok(responseData);
    }

}
