package com.cumulus.modules.business.vulnerability.support;

import com.cumulus.enums.ScanProduct;
import com.cumulus.exception.BadRequestException;
import com.cumulus.modules.business.entity.Asset;
import com.cumulus.modules.business.other.entity.es.FlawEs;
import com.cumulus.modules.business.service.AssetService;
import com.cumulus.modules.business.vulnerability.dto.ScanTaskRequest;
import com.cumulus.modules.business.vulnerability.dto.ScanXmlConfigBean;
import com.cumulus.modules.business.vulnerability.dto.ScanXmlServerBean;
import com.cumulus.modules.business.vulnerability.dto.ScanXmlTargetBean;
import com.cumulus.modules.business.vulnerability.entity.AssetScanResult;
import com.cumulus.modules.business.vulnerability.entity.Scan;
import com.cumulus.modules.business.vulnerability.entity.es.VulnerabilityEs;
import com.cumulus.modules.business.vulnerability.repository.AssetScanResultRepository;
import com.cumulus.modules.business.vulnerability.service.RemoteSiteService;
import com.cumulus.modules.system.entity.User;
import com.cumulus.utils.RsaUtils;
import com.cumulus.utils.ScanXmlUtil;
import com.cumulus.utils.SecurityUtils;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.ObjectUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.http.HttpEntity;
import org.apache.http.HttpStatus;
import org.apache.http.NameValuePair;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.message.BasicNameValuePair;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.io.File;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * 绿盟漏扫任务控制器
 *
 * @author zhaoff
 */
@Slf4j
@Component
public class NsfocusScanProvider extends AbstractVulnerabilityScanProvider {

    /**
     * 任务状态：
     * 0:等待扫描
     * 2:正在扫描
     * 5:扫描暂停
     * 4:扫描完成
     * 8:异常停止
     */
    public static final int TASK_STATUS_WAIT = 0;
    public static final int TASK_STATUS_SCANNING = 2;
    public static final int TASK_STATUS_PAUSE = 5;
    public static final int TASK_STATUS_DONE = 4;
    public static final int TASK_STATUS_ERROR = 8;

    /**
     * 远程站点的服务接口
     */
    @Autowired
    private RemoteSiteService remoteSiteService;

    /**
     * 资产服务接口
     */
    @Autowired
    private AssetService assetService;

    /**
     * 单个漏扫结果数据接口
     */
    @Autowired
    private AssetScanResultRepository assetScanResultRepository;

    @Override
    public String getSupportCode() {
        return String.valueOf(ScanProduct.NSFOCUS_RSAS.getId());
    }

    public Map<String, Object> postForResponse(CloseableHttpClient client, Map<String, Object> params) {
        Map<String, Object> responseMap = null;
        if (null == client || params == null || params.isEmpty()) {
            return null;
        }
        HttpPost post = new HttpPost(params.get("url").toString());
        params.remove("url");
        CloseableHttpResponse response = null;
        try {
            if (params.containsKey("isBatch")) {
                // 通过xml文件创建漏扫任务不设置Content-Type
                params.remove("isBatch");
                Iterator<Map.Entry<String, Object>> it = params.entrySet().iterator();
                MultipartEntityBuilder builder = MultipartEntityBuilder.create();
                while (it.hasNext()) {
                    Map.Entry<String, Object> entry = it.next();
                    if ("config_xml".equals(entry.getKey())) {
                        builder.addBinaryBody(entry.getKey(), new File(entry.getValue().toString()),
                                ContentType.TEXT_XML, entry.getValue().toString());
                    } else {
                        builder.addTextBody(entry.getKey(), entry.getValue().toString());
                    }
                }
                HttpEntity multipart = builder.build();
                post.setEntity(multipart);
            } else {
                post.setHeader("Content-Type", "application/x-www-form-urlencoded");
                List<NameValuePair> urlParameters = new ArrayList<>();
                for (Map.Entry<String, Object> entry : params.entrySet()) {
                    NameValuePair pair = new BasicNameValuePair(entry.getKey(), entry.getValue().toString());
                    urlParameters.add(pair);
                }
                post.setEntity(new UrlEncodedFormEntity(urlParameters));
            }
            response = client.execute(post);
            if (null != response && response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                responseMap = getHttpResponseData(response);
            }
        } catch (Exception e) {
            if (log.isErrorEnabled()) {
                log.error("Failed to get response, params:" + params, e);
            }
        } finally {
            releaseHttpConnection(post, response);
        }
        return responseMap;
    }

    @SuppressWarnings("unchecked")
    @Override
    public String createScanTask(ScanTaskRequest request, String ip) {
        String taskId = null;
        if (null == request || StringUtils.isBlank(ip)) {
            return null;
        }
        Scan scanner = (Scan) request.getExtra().get("scanner");
        if (scanner == null) {
            if (log.isErrorEnabled()) {
                log.error("Scanner not exist for " + ip);
            }
            return null;
        }
        String address = scanner.getScanAddress();
        String user = scanner.getScanUsername();
        String password;
        try {
            password = RsaUtils.decryptByPrivateKey(Scan.SCAN_PWD_RSA_PRIVATE_KEY, scanner.getScanPassword());
        } catch (Exception e) {
            throw new BadRequestException("创建任务失败");
        }
        String[] urlAll = parseUrl(address);
        if (null == urlAll) {
            if (log.isErrorEnabled()) {
                log.error("Scanner url is illegal: " + scanner.getId());
            }
            return null;
        }
        Map<String, Object> params = new HashMap<>(4);
        params.put("name", request.getPlan().getName() + "-" + ip);
        params.put("targets", ip);
        params.put("template_id", request.getPlan().getPolicyId().toString());
        params.put("url", genRequestUrl(urlAll[0], urlAll[1],
                "/api/task/vul/create?username=" + user + "&password=" + password));
        CloseableHttpClient client = getClient(address);
        if (null == client) {
            if (log.isErrorEnabled()) {
                log.error("Init http/https client exception: " + scanner.getId());
            }
            return null;
        }
        Map<String, Object> respMap = postForResponse(client, params);
        if (respMap != null && !respMap.isEmpty()) {
            if (respMap.containsKey("ret_code") && ((Number) respMap.get("ret_code")).intValue() == 0) {
                Map<String, Object> dataMap = (Map<String, Object>) respMap.get("data");
                taskId = dataMap.get("task_id").toString();
            } else {
                if (log.isErrorEnabled()) {
                    log.error(respMap.get("ret_msg").toString());
                }
                return null;
            }
        }
        if (log.isInfoEnabled()) {
            log.info(String.format("CreateScanTask assetIP: %s, planId:%s, taskId:%s.", ip, request.getPlanId(), taskId));
        }
        return taskId;
    }

    @SuppressWarnings("unchecked")
    @Override
    public String createBatchScanTask(ScanTaskRequest request, List<String> assetList) {
        if (null == request || assetList == null || assetList.isEmpty()) {
            if (log.isErrorEnabled()) {
                log.error("nsfocus vul task create error stage 1");
            }
            throw new BadRequestException("nsfocus vul task create error stage 1");
        }
        Scan scanner = (Scan) request.getExtra().get("scanner");
        String address = scanner.getScanAddress();
        String user = scanner.getScanUsername();
        String password;
        try {
            password = RsaUtils.decryptByPrivateKey(Scan.SCAN_PWD_RSA_PRIVATE_KEY, scanner.getScanPassword());
        } catch (Exception e) {
            throw new BadRequestException("创建任务失败");
        }
        String[] urlAll = parseUrl(address);
        if (null == urlAll) {
            if (log.isErrorEnabled()) {
                log.error("Scanner url is illegal: " + scanner.getId());
            }
            throw new BadRequestException("nsfocus vul task create error stage 2");
        }
        Map<String, Object> params = new HashMap<>(4);
        params.put("type", 1);
        String confFile = getXmlPath(request, assetList);
        if (null == confFile) {
            if (log.isErrorEnabled()) {
                log.error("Generate scan config file error: " + request.getPlan().getId());
            }
            throw new BadRequestException("nsfocus vul task create error stage 3");
        }
        params.put("config_xml", confFile);
        params.put("url", genRequestUrl(urlAll[0], urlAll[1],
                "/api/task/create?username=" + user + "&password=" + password));
        params.put("isBatch", true);
        CloseableHttpClient client = getClient(address);
        Map<String, Object> respMap = postForResponse(client, params);
        if (respMap != null && !respMap.isEmpty()) {
            if (respMap.containsKey("ret_code") && "0".equals(respMap.get("ret_code").toString())) {
                Map<String, Object> dataMap = (Map<String, Object>) respMap.get("data");
                assetScanResultRepository.updateResultByScanResultId(request.getResult().getId(), AssetScanResult.RESULT_RUNNING);
                return dataMap.get("task_id").toString();
            } else {
                if (log.isErrorEnabled()) {
                    log.error(respMap.get("ret_msg").toString());
                }
            }
        }
        if (log.isInfoEnabled()) {
            log.info(String.format("nsfocus CreateScanTask planId:%s,", request.getPlanId()));
        }
        throw new BadRequestException("nsfocus vul task create error stage 4");
    }

    @Override
    public void resumeTask(ScanTaskRequest request) {

    }

    @Override
    public void stopOneScanTask(Scan scanner, String taskId) throws Exception {
        if (log.isInfoEnabled()) {
            log.info("stop NSFOCUS RSAS plan taskId:" + taskId);
        }
        String address = scanner.getScanAddress();
        String user = scanner.getScanUsername();
        String password;
        try {
            password = RsaUtils.decryptByPrivateKey(Scan.SCAN_PWD_RSA_PRIVATE_KEY, scanner.getScanPassword());
        } catch (Exception e) {
            throw new Exception("创建任务失败");
        }
        String[] urlAll = parseUrl(address);
        if (null == urlAll) {
            if (log.isErrorEnabled()) {
                log.error("Scanner url is illegal: " + scanner.getId());
            }
            throw new Exception("Scanner url is illegal");
        }
        List<NameValuePair> urlParameters = new ArrayList<>();
        CloseableHttpClient client = getClient(address);
        if (null == client) {
            if (log.isErrorEnabled()) {
                log.error("Init http/https client exception: " + scanner.getId());
            }
            throw new Exception("Init http/https client exception");
        }
        HttpPost post = new HttpPost(genRequestUrl(urlAll[0], urlAll[1],
                "/api/task/delete/" + taskId + "?username=" + user + "&password=" + password));
        post.setHeader("Content-Type", "application/x-www-form-urlencoded");
        CloseableHttpResponse response = null;
        try {
            post.setEntity(new UrlEncodedFormEntity(urlParameters));
            response = client.execute(post);
            if (response != null && response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                getHttpResponseData(response);
            } else {
                if (log.isErrorEnabled()) {
                    log.error("Execute post request error");
                }
                throw new Exception("Execute post request error");
            }
        } catch (Exception e) {
            if (log.isErrorEnabled()) {
                log.error(e.getMessage());
            }
            throw new Exception(e.getMessage());
        } finally {
            releaseHttpConnection(post, response);
        }
    }

    @Override
    public List<Map<String, Object>> getStrategies(Scan scanner) throws Exception {
        List<Map<String, Object>> data = new ArrayList<>();
        if (log.isInfoEnabled()) {
            log.info("Get scanner strategies: " + scanner.getId());
        }
        String address = scanner.getScanAddress();
        String user = scanner.getScanUsername();
        String password;
        try {
            password = RsaUtils.decryptByPrivateKey(Scan.SCAN_PWD_RSA_PRIVATE_KEY, scanner.getScanPassword());
        } catch (Exception e) {
            throw new Exception("创建任务失败");
        }
        String[] urlAll = parseUrl(address);
        if (null == urlAll) {
            if (log.isErrorEnabled()) {
                log.error("Scanner url is illegal: " + scanner.getId());
            }
            throw new Exception("Scanner url is illegal");
        }
        List<NameValuePair> urlParameters = new ArrayList<>();
        CloseableHttpClient client = getClient(address);
        if (null == client) {
            if (log.isErrorEnabled()) {
                log.error("Init http/https client exception: " + scanner.getId());
            }
            throw new Exception("Init http/https client exception");
        }
        HttpPost post = new HttpPost(genRequestUrl(urlAll[0], urlAll[1],
                "/api/template/sysvuln/list?username=" + user + "&password=" + password));
        post.setHeader("Content-Type", "application/x-www-form-urlencoded");
        CloseableHttpResponse response = null;
        try {
            post.setEntity(new UrlEncodedFormEntity(urlParameters));
            response = client.execute(post);
            if (response != null && response.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {
                Map<String, Object> respMap = getHttpResponseData(response);
                if (respMap.containsKey("ret_code") && ((Number) respMap.get("ret_code")).intValue() == 0) {
                    if (respMap.containsKey("data")) {
                        return (List<Map<String, Object>>) respMap.get("data");
                    }
                }
            } else {
                if (log.isErrorEnabled()) {
                    log.error("Execute post request error");
                }
                throw new Exception("Execute post request error");
            }
        } catch (Exception e) {
            if (log.isErrorEnabled()) {
                log.error(e.getMessage());
            }
            throw new Exception(e.getMessage());
        } finally {
            releaseHttpConnection(post, response);
        }
        return data;
    }

    /**
     * 获取 http client
     *
     * @param address 接口地址
     * @return client
     */
    private CloseableHttpClient getClient(String address) {
        CloseableHttpClient client;
        URL url;
        try {
            url = new URL(address);
        } catch (MalformedURLException e) {
            if (log.isErrorEnabled()) {
                log.error("New scanner url exception");
            }
            return null;
        }
        if ("http".equals(url.getProtocol())) {
            client = HttpClients.createDefault();
        } else {
            client = remoteSiteService.initClient(url.getHost());
        }
        return client;
    }

    /**
     * 启动任务
     *
     * @param client  client
     * @param taskId  任务id
     * @param scanner 扫描器
     */
    private void resumeTask(CloseableHttpClient client, String taskId, Scan scanner) {
        String address = scanner.getScanAddress();
        String user = scanner.getScanUsername();
        String password;
        try {
            password = RsaUtils.decryptByPrivateKey(Scan.SCAN_PWD_RSA_PRIVATE_KEY, scanner.getScanPassword());
        } catch (Exception e) {
            throw new BadRequestException("创建任务失败");
        }
        String[] urlAll = parseUrl(address);
        Map<String, Object> params = new HashMap<>(1);
        params.put("url", genRequestUrl(urlAll[0], urlAll[1],
                "/api/task/resume/" + taskId + "?username=" + user + "&password=" + password));
        Map<String, Object> respMap = postForResponse(client, params);
        if (respMap != null && !respMap.isEmpty()) {
            if (respMap.containsKey("ret_code") && ((Number) respMap.get("ret_code")).intValue() != 0) {
                if (log.isErrorEnabled()) {
                    log.error(respMap.get("ret_msg").toString());
                }
            }
        }
    }

    @SuppressWarnings("unchecked")
    @Override
    public void getScanResult(ScanTaskRequest request, AssetScanResult assetScanResult) {
        Scan scanner = request.getPlan().getScanner();
        String address = scanner.getScanAddress();
        String user = scanner.getScanUsername();
        String password;
        try {
            password = RsaUtils.decryptByPrivateKey(Scan.SCAN_PWD_RSA_PRIVATE_KEY, scanner.getScanPassword());
        } catch (Exception e) {
            throw new BadRequestException("获取结果失败");
        }
        String[] urlAll = parseUrl(address);
        String taskId = assetScanResult.getTaskId();
        CloseableHttpClient client = getClient(address);
        Map<String, Object> progressParams = new HashMap<>(1);
        progressParams.put("url", genRequestUrl(urlAll[0], urlAll[1],
                "/api/task/status/" + taskId + "?username=" + user + "&password=" + password));
        if (log.isInfoEnabled()) {
            log.info(String.format("getScanProgress taskId: %s.", taskId));
        }
        if (!getScanProgress(client, progressParams)) {
            return;
        }
        Map<String, Object> resultParams = new HashMap<>(4);
        resultParams.put("url", genRequestUrl(urlAll[0], urlAll[1],
                "/api/report/task/" + taskId + "?username=" + user + "&password=" + password));
        resultParams.put("targets", assetScanResult.getIp());
        resultParams.put("page", 0);
        resultParams.put("page_size", 10);
        Map<String, Object> respMap = postForResponse(client, resultParams);
        Map<String, Object> dataMap = (Map<String, Object>) respMap.get("data");
        Map<String, Object> reportMap = (Map<String, Object>) dataMap.get("report");
        List<Map<String, Object>> targets = (List<Map<String, Object>>) reportMap.get("targets");
        List<VulnerabilityEs> resultList = new ArrayList<>();
        Asset asset = assetService.getHostAssetByIp(assetScanResult.getIp());
        List<Long> assetIdList = new ArrayList<>();
        if (asset != null) {
            if (targets != null && !targets.isEmpty()) {
                Map<String, Object> target = targets.get(0);
                resultList = analysisResultOneAsset(target, asset);
            }
            assetIdList.add(asset.getId());
        }
        saveVulList(request, assetIdList, assetScanResult.getIp(), resultList, VulnerabilityEs.CATEGORY_HOST);
    }

    /**
     * 判断扫描任务是否执行结束
     *
     * @param client http client
     * @param params 请求参数
     * @return 是否执行结束
     */
    @SuppressWarnings("unchecked")
    private boolean getScanProgress(CloseableHttpClient client, Map<String, Object> params) {
        Map<String, Object> respMap = postForResponse(client, params);
        if (respMap != null && !respMap.isEmpty()) {
            if (respMap.containsKey("ret_code") && ((Number) respMap.get("ret_code")).intValue() == 0) {
                Map<String, Object> dataMap = (Map<String, Object>) respMap.get("data");
                Number status = (Number) dataMap.get("status");
                switch (status.intValue()) {
                    case TASK_STATUS_WAIT:
                    case TASK_STATUS_SCANNING:
                    case TASK_STATUS_PAUSE:
                        return false;
                    case TASK_STATUS_DONE:
                        return true;
                    case TASK_STATUS_ERROR:
                    default:
                        if (log.isDebugEnabled()) {
                            log.debug("progress status:" + status.intValue());
                        }
                }
            } else {
                if (log.isErrorEnabled()) {
                    log.error("Get progress status error");
                }
            }
        } else {
            if (log.isErrorEnabled()) {
                log.error("Get progress status error");
            }
        }
        return false;
    }

    /**
     * 生成绿盟漏扫任务配置文件
     *
     * @param request 漏扫请求
     * @param ipList  资产 id 列表
     * @return 漏扫配置文件临时路径
     */
    private String getXmlPath(ScanTaskRequest request, List<String> ipList) {
        // TODO 需要资产账号密码
        if (ipList == null || ipList.isEmpty()) {
            if (log.isWarnEnabled()) {
                log.warn("Asset ids is null or empty");
            }
            return null;
        }
        List<String> assetIps = new ArrayList<>();
        ScanXmlConfigBean configBean = new ScanXmlConfigBean();
        for (String ip : ipList) {
            ScanXmlTargetBean targetBean = new ScanXmlTargetBean();
            targetBean.setIp(ip);
            targetBean.setProtocol("ssh");
            targetBean.setPort("22");
            targetBean.setUserName("");
            targetBean.setPassword("");
            configBean.addTarget(targetBean);
            assetIps.add(ip);
        }
        ScanXmlServerBean serverBean = configBean.getServerTargets();
        serverBean.setValue(StringUtils.join(assetIps.iterator(), ";"));
        String planName = request.getPlan().getName();
        configBean.setTaskName(planName);
        if (request.getPlan().getPolicyId() == null) {
            log.warn("Vulnerability policy is null");
            return null;
        }
        configBean.setPlugin(request.getPlan().getPolicyId().toString());
        String filePath;
        try {
            filePath = ScanXmlUtil.toXmlString(configBean, request.getPlanId().toString());
        } catch (Exception e) {
            log.warn("ScanXmlConfigBean to XML error, planName: " + planName, e);
            throw new RuntimeException(e);
        }
        return filePath;
    }

    /**
     * 解析返回的报告 返回结果的 data 字段
     *
     * @param target 入参为返回结果的 data 中的 target 列表的第一个
     * @return 返回漏洞列表
     */
    @SuppressWarnings("unchecked")
    public List<VulnerabilityEs> analysisResultOneAsset(Map<String, Object> target, Asset asset) {
        //vuln_scanned 是扫描出的元数据， vuln_detail是绿盟方分析后出的报告，所以vuln_detail的长度小于等于 vuln_scanned 使用 vul_id表示相同的漏洞
        List<Map<String, Object>> vulDetailList = (List<Map<String, Object>>) target.get("vuln_detail");
        if (vulDetailList.isEmpty()) {
            return new ArrayList<>();
        }
        List<Map<String, Object>> vulScannedList = (List<Map<String, Object>>) target.get("vuln_scanned");
        List<VulnerabilityEs> flaws = new ArrayList<>();


        Map<String, Map<String, Object>> scannedMap = new LinkedHashMap<>();
        for (Map<String, Object> vulScanned : vulScannedList) {
            scannedMap.put(String.valueOf(vulScanned.get("vul_id")), vulScanned);
        }

        for (Map<String, Object> vulDetail : vulDetailList) {
            String vulId = String.valueOf(vulDetail.get("vul_id"));
            Map<String, Object> vulScanned = scannedMap.get(vulId);
            VulnerabilityEs flaw = resultMapToFlaw(vulScanned, vulDetail, asset);
            flaws.add(flaw);
        }
        return flaws;
    }

    public VulnerabilityEs resultMapToFlaw(Map<String, Object> scannedMap, Map<String, Object> vulDetail, Asset asset) {
        String flawDetail = String.valueOf(vulDetail.get("vuln_detail"));
        String description = String.valueOf(vulDetail.get("description"));
        String cveId = String.valueOf(vulDetail.get("cve_id"));
        String cnCve = String.valueOf(vulDetail.get("cnnvd"));
        String flawSolution = String.valueOf(vulDetail.get("solution"));
        String flawClassification = String.valueOf(vulDetail.get("threat_category"));
        double riskPoints = Double.parseDouble(String.valueOf(vulDetail.get("risk_points")));
        String flawName = String.valueOf(vulDetail.get("name"));
        Object portObj = scannedMap.get("port");
        String port;
        if (ObjectUtils.allNotNull(portObj)) {
            port = String.valueOf(portObj);
        } else {
            port = String.valueOf(asset.getPort());
        }
        String userName;
        try {
            userName = SecurityUtils.getCurrentUsername();
        } catch (Exception e) {
            userName = User.DEFAULT_SUPER_MANAGER_NAME;
        }

        VulnerabilityEs flaw = new VulnerabilityEs();
        Map<String, Object> detail = new HashMap<>(6);
        Date now = new Date();
        flaw.setCreateBy(userName);
        flaw.setUpdateBy(userName);
        flaw.setCreateTime(now);
        flaw.setUpdateTime(now);
        flaw.setLatest(true);
        flaw.setIp(asset.getIp());
        flaw.setAssetId(String.valueOf(asset.getId()));
        flaw.setPort(port);
        flaw.setName(flawName);
        flaw.setDeptName(asset.getDept() == null ? null : asset.getDept().getName());
        if (StringUtils.isNotBlank(cveId)) {
            flaw.setVulNumber(cveId);
        } else if (StringUtils.isNotBlank(cnCve)) {
            flaw.setVulNumber(cnCve);
        }
        flaw.setSource(VulnerabilityEs.SOURCE_SCAN_THIRD_PARTY);
        flaw.setHandleStatus(FlawEs.HANDLE_STATUS_NEW);
        flaw.setFindTime(now);
        flaw.setDetail(detail);
        flaw.setRiskLevel(getGrade(riskPoints));
        flaw.setVulCategory(VulnerabilityEs.CATEGORY_HOST);
        detail.put(VulnerabilityEs.DETAIL_KEY_CVE_NUMBER, cveId);
        detail.put(VulnerabilityEs.DETAIL_KEY_CNNVD_NUMBER, cnCve);
        detail.put(VulnerabilityEs.DETAIL_KEY_DETAILS, flawDetail);
        detail.put(VulnerabilityEs.DETAIL_KEY_DESCRIPTION, description);
        detail.put(VulnerabilityEs.DETAIL_KEY_SOLUTION, flawSolution);
        detail.put(VulnerabilityEs.DETAIL_KEY_VUL_TYPE, flawClassification);
        detail.put(VulnerabilityEs.DETAIL_KEY_CVSS_SCORE, VulnerabilityEs.DEFAULT_CVSS_SCORE);
        return flaw;
    }

    /**
     * 绿盟分数转换风险级别  根据risk_points判断风险等级 低危：0~4 中危：(包括4)4~7 高危：(包括7)7~10 严重：6以上
     *
     * @param riskPoints 绿盟分数
     * @return 风险级别
     */
    private int getGrade(double riskPoints) {
        if (riskPoints >= 7) {
            return 2;
        } else if (riskPoints >= 4) {
            return 1;
        }
        return 0;
    }
}
