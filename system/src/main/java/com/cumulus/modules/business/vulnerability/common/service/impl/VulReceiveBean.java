package com.cumulus.modules.business.vulnerability.common.service.impl;


import com.alibaba.fastjson.JSONObject;
import com.cumulus.modules.business.config.RabbitMqConfig;
import com.cumulus.modules.business.vulnerability.common.model.BuiltInVulReceiveModel;
import com.cumulus.modules.business.vulnerability.service.VulnerabilityHistoryEsService;
import com.cumulus.modules.business.vulnerability.service.impl.VulnerabilityHistoryEsServiceImpl;
import com.cumulus.modules.business.vulnerability.support.EngineScanProvider;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.amqp.core.ExchangeTypes;
import org.springframework.amqp.core.Message;
import org.springframework.amqp.rabbit.annotation.Exchange;
import org.springframework.amqp.rabbit.annotation.Queue;
import org.springframework.amqp.rabbit.annotation.QueueBinding;
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

/**
 * 内置漏扫专用消息接收器
 *
 * @author shenjc
 */
@Slf4j
@Component
public class VulReceiveBean {

    /**
     * 漏洞历史服务
     */
    @Autowired
    private VulnerabilityHistoryEsService vulnerabilityHistoryEsService;

    /**
     * 监听采集异步请求
     *
     * @param message 异步回应
     */
    @RabbitListener(bindings = @QueueBinding(
            value = @Queue(name = RabbitMqConfig.VULNERABILITY_RECEIVE_TASK_QUEUE, durable = "true"),
            key = RabbitMqConfig.VULNERABILITY_RECEIVE_ROUTING_KEY,
            exchange = @Exchange(value = RabbitMqConfig.VULNERABILITY_TASK_EXCHANGE, type = ExchangeTypes.TOPIC)))
    public void handleAsyncVulScanResponse(Message message) {
        if (log.isInfoEnabled()) {
            log.info("handleAsyncVulScanResponse Message received from '{}/{}", RabbitMqConfig.VULNERABILITY_TASK_EXCHANGE,
                    RabbitMqConfig.VULNERABILITY_RECEIVE_TASK_QUEUE);
        }
        try {
            if (null == message) {
                if (log.isInfoEnabled()) {
                    log.info("handleAsyncVulScanResponse Message is null.");
                }
                return;
            }
            BuiltInVulReceiveModel vulInfoMap = JSONObject.parseObject(new String(message.getBody()), BuiltInVulReceiveModel.class);
            if (log.isInfoEnabled()) {
                log.info("handleAsyncVulScanResponse Message received body:{}", JSONObject.toJSONString(vulInfoMap));
            }
            // 加入消息列表
            if (StringUtils.startsWith(vulInfoMap.getPlanId(), VulnerabilityHistoryEsServiceImpl.SCAN_RETEST_PLAN_PREFIX)) {
                vulnerabilityHistoryEsService.addRetestMessage(vulInfoMap);
            } else {
                EngineScanProvider.addMessage(vulInfoMap);
            }
        } catch (Exception e) {
            if (log.isWarnEnabled()) {
                log.warn("handleAsyncVulScanResponse Receive gather response exception", e);
            }
        }
    }
}
