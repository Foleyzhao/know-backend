package com.cumulus.modules.business.vulnerability.common.service.impl;


import com.alibaba.fastjson.JSONObject;
import com.cumulus.modules.business.config.RabbitMqConfig;
import com.cumulus.modules.business.vulnerability.common.model.BuiltInVulSendModel;
import lombok.extern.slf4j.Slf4j;
import org.springframework.amqp.core.Address;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;

/**
 * 内置漏扫专用消息发送器
 *
 * @author shenjc
 */
@Slf4j
@Component
public class VulSendBean {

    /**
     * 消息自身的TTL(ms)，过期后将从队列中删除
     */
    private static final long EXPIRATION = 10000000;

    /**
     * 消息通知模板对象
     */
    @Autowired
    private RabbitTemplate rabbitTemplate;

    @PostConstruct
    private void init() {
        rabbitTemplate.setMessageConverter(new Jackson2JsonMessageConverter());
    }

    /**
     * 发送异步引擎采集请求
     *
     * @param model 引擎采集请求
     */
    public void sendRequestForAsyncResponse(BuiltInVulSendModel model) {
        String modelStr = JSONObject.toJSONString(model);
        if (log.isInfoEnabled()) {
            log.info("VulSendBean Send request for async response.:{}", modelStr);
        }
        rabbitTemplate.convertAndSend(
                RabbitMqConfig.VULNERABILITY_TASK_EXCHANGE,
                RabbitMqConfig.VULNERABILITY_SEND_ROUTING_KEY,
                modelStr,
                message -> {
                    message.getMessageProperties().setReplyToAddress(
                            new Address(RabbitMqConfig.VULNERABILITY_TASK_EXCHANGE + "/" +
                                    RabbitMqConfig.VULNERABILITY_RECEIVE_ROUTING_KEY));
                    message.getMessageProperties().setExpiration(String.valueOf(EXPIRATION));
                    return message;
                });
    }
}
