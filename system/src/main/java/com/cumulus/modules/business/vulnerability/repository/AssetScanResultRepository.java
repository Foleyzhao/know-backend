package com.cumulus.modules.business.vulnerability.repository;

import com.cumulus.modules.business.vulnerability.entity.AssetScanResult;
import com.cumulus.modules.business.vulnerability.entity.ScanResult;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;

import javax.transaction.Transactional;
import java.util.Collection;
import java.util.List;

/**
 * 资产扫描结果数据访问接口
 *
 * @author zhaoff
 */
public interface AssetScanResultRepository extends JpaRepository<AssetScanResult, Long>,
        JpaSpecificationExecutor<AssetScanResult> {

    /**
     * 根据扫描id获取资产列表
     *
     * @param taskId 扫描id
     * @return 返回列表
     */
    List<AssetScanResult> findAllByTaskId(String taskId);

    /**
     * 根据ip查询单个资产漏洞扫描结果
     *
     * @param ip         ip字段
     * @param scanResult 扫描结果对象
     * @return 返回资产漏洞扫描结果对象列表
     */
    List<AssetScanResult> findAllByIpAndScanResult(String ip, ScanResult scanResult);

    /**
     * 根据扫描结果id查询单个的资产扫描结果
     *
     * @param scanResult 扫描结果
     * @return 返回列表
     */
    List<AssetScanResult> findAllByScanResult(ScanResult scanResult);

    /**
     * 计算某个任务的某个状态下的任务数
     *
     * @param scanResult 任务信息
     * @param result     结果列表
     * @return 返回计数
     */
    Integer countAllByScanResultAndResultIn(ScanResult scanResult, Collection<Integer> result);

    /**
     * 暂停某个扫描结果对象的所有xxx
     *
     * @param scanResultId 扫描结果对象id
     */
    @Modifying
    @Transactional(rollbackOn = Exception.class)
    @Query(nativeQuery = true, value = "update `tbl_vulnerability_scan_result_asset` set `status` = 2 where `result` in (0,1) and scan_result_id = ?1")
    void updateStatusPauseByScanResultId(Long scanResultId);

    /**
     * 重新开始某个扫描结果对象的所有xxx
     *
     * @param scanResultId 扫描结果对象id
     */
    @Modifying
    @Transactional(rollbackOn = Exception.class)
    @Query(nativeQuery = true, value = "update `tbl_vulnerability_scan_result_asset` set `status` = " +
            "case " +
            "when `result` in (1,0) then `result` " +
            "when `result` in (2,3) then 3 " +
            "end and scan_result_id = ?1")
    void updateStatusRestartByScanResultId(Long scanResultId);

    /**
     * 结束某个扫描结果对象的所有
     *
     * @param scanResultId 扫描结果对象id
     */
    @Modifying
    @Transactional(rollbackOn = Exception.class)
    @Query(nativeQuery = true, value = "update `tbl_vulnerability_scan_result_asset` set `status` = 3 where scan_result_id = ?1")
    void updateStatusCancelByScanResultId(Long scanResultId);

    /**
     * 更新某个扫描结果对象未完成扫描的的所有
     *
     * @param scanResultId 扫描结果对象id
     * @param result       结果码
     */
    @Modifying
    @Transactional(rollbackOn = Exception.class)
    @Query(nativeQuery = true, value = "update `tbl_vulnerability_scan_result_asset` set `result` = ?2 where scan_result_id = ?1 and `result` in  (0,1)")
    void updateResultByScanResultId(Long scanResultId, Integer result);

    /**
     * 更新某个任务的所有TaskId(目标引擎所使用的id)
     *
     * @param taskId       任务id
     * @param scanResultId 扫描结果id
     */
    @Modifying
    @Transactional(rollbackOn = Exception.class)
    @Query(nativeQuery = true, value = "update `tbl_vulnerability_scan_result_asset` set `task_id` = ?1 where scan_result_id = ?2")
    void updateAllTaskIdByScanResultId(String taskId, Long scanResultId);
}
