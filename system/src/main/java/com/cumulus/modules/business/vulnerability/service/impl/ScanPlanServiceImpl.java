package com.cumulus.modules.business.vulnerability.service.impl;

import com.cumulus.exception.BadRequestException;
import com.cumulus.modules.business.entity.Asset;
import com.cumulus.modules.business.repository.AssetRepository;
import com.cumulus.modules.business.utils.CronUtil;
import com.cumulus.modules.business.utils.TaskScheduleModel;
import com.cumulus.modules.business.vulnerability.entity.ScanPlan;
import com.cumulus.modules.business.vulnerability.repository.ScanPlanRepository;
import com.cumulus.modules.business.vulnerability.service.ScanPlanService;
import com.cumulus.modules.quartz.entity.QuartzJob;
import com.cumulus.modules.quartz.entity.QuartzJobEnum;
import com.cumulus.modules.quartz.service.QuartzJobService;
import com.cumulus.modules.system.entity.Dept;
import com.cumulus.mysql.utils.QueryableIncludeOrSpecification;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.util.MultiValueMap;

import javax.transaction.Transactional;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * 扫描计划服务实现
 *
 * @author zhaoff
 */
@Service
@Slf4j
public class ScanPlanServiceImpl implements ScanPlanService {

    /**
     * 扫描计划数据访问接口
     */
    @Autowired
    private ScanPlanRepository scanPlanRepository;

    /**
     * 资产数据接口
     */
    @Autowired
    private AssetRepository assetRepository;

    /**
     * 定时任务服务层
     */
    @Autowired
    private QuartzJobService quartzJobService;

    /**
     * 漏扫任务执行runner
     */
    @Lazy
    @Autowired
    private ScanTaskRunner scanTaskRunner;

    @Override
    public Page<ScanPlan> page(Pageable pageable, MultiValueMap<String, String> params) {
        return scanPlanRepository.findAll(
                new QueryableIncludeOrSpecification<>(ScanPlan.class, params), pageable);
    }

    @Override
    @Transactional(rollbackOn = Exception.class)
    public void addScanPlan(ScanPlan plan) {
        checkPlan(plan, "新增失败");
        plan.setStatus(ScanPlan.SCAN_NOT);
        plan.setExtra(new HashMap<>(0));
        plan.setCreateTime(new Timestamp(System.currentTimeMillis()));
        plan.setQuartzJob(null);
        plan.setLastTime(null);
        plan.setNextTime(null);
        scanPlanRepository.save(plan);
        if (ScanPlan.MONITORING_TYPE_MANUAL != plan.getMonitoringType()) {
            QuartzJob quartzJob = getQuartzJob(plan);
            quartzJobService.create(quartzJob);
            plan.setQuartzJob(quartzJob);
            plan.setNextTime(quartzJobService.getNextFireTime(quartzJob.getId()));
            scanPlanRepository.save(plan);
        }
    }

    @Override
    public Long getAssetSum(ScanPlan plan) {
        switch (plan.getScanType()) {
            case ScanPlan.SCAN_TYPE_ALL: {
                return assetRepository.countAllByAssetCategory(Asset.CATEGORY_HOST);
            }
            case ScanPlan.SCAN_TYPE_BY_DEPT: {
                return assetRepository.countAllByAssetCategoryAndDeptIn(Asset.CATEGORY_HOST, plan.getScanDept());
            }
            case ScanPlan.SCAN_TYPE_CUSTOM: {
                return (long) plan.getScanAsset().size();
            }
            default: {
                break;
            }
        }
        return 0L;
    }

    @Override
    @Transactional(rollbackOn = Exception.class)
    public void updateScanPlan(ScanPlan oldPlan, ScanPlan newPlan) {
        checkUpdate(oldPlan, newPlan);
        if (ScanPlan.MONITORING_TYPE_MANUAL == oldPlan.getMonitoringType()) {
            if (oldPlan.getQuartzJob() != null && oldPlan.getQuartzJob().getId() != null) {
                quartzJobService.delete(Collections.singleton(oldPlan.getQuartzJob().getId()));
                oldPlan.setQuartzJob(null);
                oldPlan.setNextTime(null);
            }
        } else {
            QuartzJob quartzJob = getQuartzJob(oldPlan);
            if (oldPlan.getQuartzJob() == null || oldPlan.getQuartzJob().getId() == null) {
                quartzJobService.create(quartzJob);
            } else {
                quartzJob.setId(oldPlan.getQuartzJob().getId());
                quartzJobService.update(quartzJob);
            }
            oldPlan.setQuartzJob(quartzJob);
            oldPlan.setNextTime(quartzJobService.getNextFireTime(quartzJob.getId()));
        }
        scanPlanRepository.save(oldPlan);
    }

    @Override
    @Transactional(rollbackOn = Exception.class)
    public void deleteScanPlan(ScanPlan plan) {
        //扫描任务启动中无法删除
        if (scanTaskRunner.isScanPlanRunning(plan.getId()) || ScanPlan.SCAN_RUNNING == plan.getStatus()) {
            throw new BadRequestException("漏洞扫描计划,删除失败");
        }
        scanPlanRepository.delete(plan);
        if (plan.getQuartzJob() != null && plan.getQuartzJob().getId() != null) {
            quartzJobService.delete(Collections.singleton(plan.getQuartzJob().getId()));
        }
    }

    @Override
    public ScanPlan getScanPlanById(Long id) {
        return scanPlanRepository.findById(id).orElse(null);
    }

    @Override
    public List<ScanPlan> findAllScanPlan() {
        return scanPlanRepository.findAll();
    }

    @Override
    public List<String> getScanIpList(Long id) {
        ScanPlan scanPlan = scanPlanRepository.findById(id).orElse(null);
        if (scanPlan == null) {
            return new ArrayList<>();
        }
        switch (scanPlan.getScanType()) {
            case ScanPlan.SCAN_TYPE_ALL: {
                return assetRepository.findAll().stream().map(Asset::getIp).collect(Collectors.toList());
            }
            case ScanPlan.SCAN_TYPE_BY_DEPT: {
                if (scanPlan.getScanDept() == null || scanPlan.getScanDept().isEmpty()) {
                    return new ArrayList<>();
                }
                return assetRepository.findAllByDeptIn(scanPlan.getScanDept()).stream()
                        .map(Asset::getIp).collect(Collectors.toList());
            }
            case ScanPlan.SCAN_TYPE_CUSTOM: {
                return scanPlan.getScanAsset().stream().map(Asset::getIp).collect(Collectors.toList());
            }
            default: {
                break;
            }
        }
        return new ArrayList<>();
    }

    @Override
    public boolean updatePlanStatus(Long id, Integer status) {
        ScanPlan scanPlan = scanPlanRepository.findById(id).orElse(null);
        if (null == scanPlan) {
            return false;
        }
        switch (status) {
            case ScanPlan.SCAN_RUNNING: {
                if (scanPlan.getStatus() == ScanPlan.SCAN_NOT || scanPlan.getStatus() == ScanPlan.SCAN_PAUSE
                        || scanPlan.getStatus() == ScanPlan.SCAN_FINISH) {
                    scanPlan.setStatus(status);
                } else {
                    return false;
                }
                break;
            }
            case ScanPlan.SCAN_PAUSE: {
                if (scanPlan.getStatus() == ScanPlan.SCAN_RUNNING) {
                    scanPlan.setStatus(status);
                } else {
                    return false;
                }
                break;
            }
            case ScanPlan.SCAN_FINISH: {
                //任何状态都可以停止
                scanPlan.setExtra(new HashMap<>(0));
                scanPlan.setStatus(status);
                break;
            }
            default: {
                return false;
            }
        }
        scanPlanRepository.save(scanPlan);
        return true;
    }

    @Override
    public List<ScanPlan> findAllRunningPlan() {
        List<Integer> status = new ArrayList<>();
        status.add(ScanPlan.SCAN_PAUSE);
        status.add(ScanPlan.SCAN_NOT);
        status.add(ScanPlan.SCAN_RUNNING);
        return scanPlanRepository.findAllByStatusIn(status);
    }

    @Override
    @Transactional(rollbackOn = Exception.class)
    public String deleteBatches(List<Long> list) {
        int success = 0;
        for (Long id : list) {
            ScanPlan scanPlan = scanPlanRepository.findById(id).orElse(null);
            if (scanPlan == null) {
                continue;
            }
            try {
                deleteScanPlan(scanPlan);
                success++;
            } catch (BadRequestException e) {
                if (log.isInfoEnabled()) {
                    log.info("can not deleteScanPlan BadRequestException:{} \n\t scanPlanId:{}", e.getMessage(), id);
                }
            }
        }
        return "删除成功,共" + list.size() + "条任务,成功删除" + success + "条";
    }

    /**
     * 获取监控任务
     *
     * @param plan 扫描计划
     */
    private QuartzJob getQuartzJob(ScanPlan plan) {
        Integer monitoringType = plan.getMonitoringType();
        List<Integer> paramList = plan.getMonitoringParam();
        Date startTime = plan.getStartTime();
        Long id = plan.getId();
        if (paramList == null || paramList.isEmpty() || startTime == null) {
            throw new BadRequestException("定时任务参数有误");
        }
        QuartzJob job = new QuartzJob();
        job.setJobName(plan.getName());
        job.setJobType(QuartzJobEnum.VULNERABILITY.getJobType());
        job.setBeanName(QuartzJobEnum.VULNERABILITY.getBeanName());
        job.setMethodName(QuartzJobEnum.VULNERABILITY.getMethodName());
        job.setIsPause(false);
        job.setParams(id);
        job.setStartTime(new Timestamp(startTime.getTime()));
        //cron表达式或者间隔处理
        Calendar startTimeCalendar = Calendar.getInstance();
        startTimeCalendar.setTimeInMillis(startTime.getTime());
        //构建cron表达式模型
        TaskScheduleModel model = new TaskScheduleModel();
        model.setHour(startTimeCalendar.get(Calendar.HOUR_OF_DAY));
        model.setMinute(startTimeCalendar.get(Calendar.MINUTE));
        model.setSecond(startTimeCalendar.get(Calendar.SECOND));
        switch (monitoringType) {
            case ScanPlan.MONITORING_TYPE_CUSTOM: {
                job.setPeriod(paramList.get(0) * 3600 * 24L);
                break;
            }
            case ScanPlan.MONITORING_TYPE_WEEKLY: {
                model.setJobType(TaskScheduleModel.WEEKLY);
                model.setDayOfWeeks(paramList);
                job.setCronExpression(CronUtil.createCronExpression(model));
                job.setDescription(CronUtil.createDescription(model));
                break;
            }
            case ScanPlan.MONITORING_TYPE_MONTHLY: {
                model.setJobType(TaskScheduleModel.MONTHLY);
                model.setDayOfMonths(paramList);
                job.setCronExpression(CronUtil.createCronExpression(model));
                job.setDescription(CronUtil.createDescription(model));
                break;
            }
            default: {
                break;
            }
        }
        return job;
    }

    /**
     * 校验新增的扫描任务
     *
     * @param plan        新增的扫描任务
     * @param errorPrefix 报错前缀
     */
    private void checkPlan(ScanPlan plan, String errorPrefix) {
        checkAssetList(plan, errorPrefix);
        if (!plan.getBuiltIn()) {
            if (plan.getScanner() == null || plan.getScanner().getId() == null) {
                throw new BadRequestException(errorPrefix + ",扫描器不存在");
            }
        }
        // 查询名称,内置漏扫计划名去重
        if (StringUtils.isNotBlank(plan.getName())) {
            Integer count = scanPlanRepository.countAllByNameAndBuiltInAndIdNot(plan.getName(), plan.getBuiltIn(), plan.getId());
            if (count > 0) {
                throw new BadRequestException(errorPrefix + ",任务名重复");
            }
        }
    }

    /**
     * 校验更新的扫描任务
     *
     * @param oldPlan 老对象
     * @param newPlan 新对象
     */
    private void checkUpdate(ScanPlan oldPlan, ScanPlan newPlan) {
        if (StringUtils.isNotBlank(newPlan.getName())) {
            oldPlan.setName(newPlan.getName());
        }
        if (newPlan.getScanner() != null) {
            oldPlan.setScanner(newPlan.getScanner());
        }
        if (newPlan.getPolicyId() != null) {
            oldPlan.setPolicyId(newPlan.getPolicyId());
        }
        if (newPlan.getScanType() != null) {
            oldPlan.setScanType(newPlan.getScanType());
        }
        switch (oldPlan.getScanType()) {
            case ScanPlan.SCAN_TYPE_CUSTOM: {
                oldPlan.setScanDept(null);
                if (newPlan.getScanAsset() != null) {
                    oldPlan.setScanAsset(newPlan.getScanAsset());
                }
                break;
            }
            case ScanPlan.SCAN_TYPE_BY_DEPT: {
                oldPlan.setScanAsset(null);
                if (newPlan.getScanDept() != null) {
                    oldPlan.setScanDept(newPlan.getScanDept());
                }
                break;
            }
            case ScanPlan.SCAN_TYPE_ALL: {
                oldPlan.setScanDept(null);
                oldPlan.setScanAsset(null);
                break;
            }
            default: {
                throw new BadRequestException("更新失败, 不存在该扫描类型");
            }
        }
        if (newPlan.getMonitoringType() != null) {
            oldPlan.setMonitoringType(newPlan.getMonitoringType());
        }
        if (newPlan.getMonitoringParam() != null) {
            oldPlan.setMonitoringParam(newPlan.getMonitoringParam());
        }
        if (newPlan.getBuiltIn() != null) {
            oldPlan.setBuiltIn(newPlan.getBuiltIn());
        }
        if (newPlan.getStartTime() != null) {
            oldPlan.setStartTime(newPlan.getStartTime());
        }
        checkPlan(oldPlan, "更新失败");
    }

    /**
     * 校验资产列表
     *
     * @param scanPlan    扫描任务
     * @param errorPrefix 报错前缀
     */
    private void checkAssetList(ScanPlan scanPlan, String errorPrefix) {
        switch (scanPlan.getScanType()) {
            case ScanPlan.SCAN_TYPE_CUSTOM: {
                boolean emptyAssetList = scanPlan.getScanAsset().stream().noneMatch(asset -> asset.getId() != null);
                if (emptyAssetList) {
                    throw new BadRequestException(errorPrefix + ",扫描任务未关联资产");
                }
                break;
            }
            case ScanPlan.SCAN_TYPE_BY_DEPT: {
                boolean emptyAssetList = scanPlan.getScanDept().stream().noneMatch(dept -> dept.getId() != null);
                if (emptyAssetList) {
                    throw new BadRequestException(errorPrefix + ",扫描任务未关联资产");
                }
                break;
            }
            case ScanPlan.SCAN_TYPE_ALL: {
                break;
            }
            default: {
                throw new BadRequestException(errorPrefix + ",不存在该扫描类型");
            }
        }
    }
}
