package com.cumulus.modules.business.vulnerability.entity;

import com.cumulus.base.BaseEntity;
import com.cumulus.enums.ScanProduct;
import com.cumulus.modules.system.entity.Dept;
import com.cumulus.mysql.userType.JsonType;
import com.fasterxml.jackson.annotation.JsonInclude;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.hibernate.annotations.Parameter;
import org.hibernate.annotations.Type;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import java.io.Serializable;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * 漏洞扫描计划结果
 *
 * @author zhaoff
 */
@Getter
@Setter
@Entity
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "tbl_vulnerability_scan_result")
@JsonInclude(JsonInclude.Include.NON_EMPTY)
public class ScanResult extends BaseEntity implements Serializable {

    private static final long serialVersionUID = -6358224136682106050L;

    /**
     * 扫描状态： 0：扫描中 1：成功 2：失败
     */
    public static final int RESULT_SCANNING = 0;
    public static final int RESULT_SUCCESS = 1;
    public static final int RESULT_FAIL = 2;
    public static final int RESULT_CANCEL = 3;
    public static final int RESULT_FAIL_PROJECT_RESTART = 4;
    public static final int RESULT_FAIL_TIME_OUT = 5;

    public static final String RESULT_SCANNING_STR = "扫描中";
    public static final String RESULT_SUCCESS_STR = "扫描完成";
    public static final String RESULT_FAIL_STR = "扫描失败";
    public static final String RESULT_CANCEL_STR = "手动取消";
    public static final String RESULT_FAIL_PROJECT_RESTART_STR = "平台重启";
    public static final String RESULT_FAIL_TIME_OUT_STR = "任务运行超时";
    public static final String RESULT_DEFAULT_STR = "未知";


    /**
     * 生成的文件后缀
     */
    public static final String FILE_SUFFIX = ".html";

    /**
     * ID
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * 扫描器名称
     */
    private String scannerName;

    /**
     * 扫描器产品
     */
    private String scannerProduct;

    /**
     * 扫描器版本
     */
    private String scannerVersion;

    /**
     * 任务id 不做关联只是查询用
     */
    private Long planId;

    /**
     * 任务名称
     */
    private String planName;

    /**
     * 策略id
     */
    private Integer policyId;

    /**
     * 资产扫描结果，0:成功，1:失败 2：扫描中
     */
    private Integer result;

    /**
     * 0 全部, 1 按部门, 2 自定义
     */
    private Integer scanType;

    /**
     * 是否使用内置的 true：内置 false：第三方
     */
    private boolean builtIn;


    @Type(type = JsonType.JSON_TYPE_CLASS_PATH, parameters = {
            @Parameter(name = "type", value = "LIST"),
            @Parameter(name = "element", value = "java.lang.String")
    })
    private List<String> scanDeptName;

    /**
     * 开始时间
     */
    private Date startTime;

    /**
     * 结束时间
     */
    private Date endTime;

    /**
     * 文件名（存储再 服务器中的html文件名）
     */
    private String fileName;

    /**
     * 漏洞扫描结果的其他扩展属性
     * eg:
     * {
     * "id":1
     * "pluginID":"10114",
     * "startTime":"",
     * "endTime":"",
     * "extra":{
     * "classVulnIds":{
     * "Critical": {
     * "Fixed":[pluginid1,pluginid2,...],
     * "Unfixed":[pluginid1,pluginid2,...]
     * },
     * "High": {
     * "Fixed":[pluginid1,pluginid2,...],
     * "Unfixed":[pluginid1,pluginid2,...]
     * },
     * "Medium": {
     * "Fixed":[pluginid1,pluginid2,...],
     * "Unfixed":[pluginid1,pluginid2,...]
     * }
     * },
     * "criticalVulns":{
     * "pluginId1" : [1,2,3],
     * "pluginId2" : [1,2,3],
     * },
     * "highVulns":{
     * "pluginId1" : [1,2,3],
     * "pluginId2" : [1,2,3],
     * },
     * "mediumVulns":{
     * "pluginId1" : [1,2,3],
     * "pluginId2" : [1,2,3],
     * },
     * "Critical":["34jk", "344UIO"], //元素为存在es中漏洞的ID
     * "High":["34jk", "344UIO"], //元素为存在es中漏洞的ID
     * "Medium":["34jk", "344UIO"], //元素为存在es中漏洞的ID
     * "scanResults":[{
     * "scanResultID":"1510",//获取结果的id
     * "asset":12, //扫描的资产ID
     * "finish":"1", //完成,
     * "firstScan":true //首次扫描
     * },{
     * "scanResultId":"1511",
     * "asset":13,
     * "finish":"0", //未完成
     * "firstScan":false
     * }
     * ],
     * "scanResultID":"xxx", //获取结果的id
     * "unfinishScanInfo":{
     * "15" : //资产id
     * [
     * "10.10.16.41", //扫描失败的资产名称
     * "10.10.16.41", //扫描失败的资产IP
     * "server response failed", //失败原因
     * 0 //扫描失败的类型:创建扫描任务失败
     * ],
     * "1" : //资产id
     * [
     * "16.12", //扫描失败的资产名称
     * "10.10.16.12", //扫描失败的资产IP
     * "exception", //失败原因
     * 1 //扫描失败的类型：获取扫描结果失败
     * ]
     * },
     * "devScanFailedSize":1, //扫描失败的资产数
     * "unscanDevs":[1,33,44], //未扫描设备的ID列表
     * "statistics":{
     * "criticalUnfixed":12,
     * "criticalfixed":13,
     * "highUnfixed":13,
     * "highfixed":13,
     * "mediumUnfixed":13,
     * "mediumfixed":13,
     * }
     * }
     * }
     */
    @Type(type = JsonType.JSON_TYPE_CLASS_PATH)
    private Map<String, Object> extra = new HashMap<>();

    /**
     * 通过 ScanPlan 生成ScanResult
     *
     * @param plan 任务对象
     */
    public ScanResult(ScanPlan plan) {
        this.setStartTime(new Date());
        if (plan.getScanner() != null) {
            this.setScannerName(plan.getScanner().getName());
            this.setScannerProduct(ScanProduct.getById(plan.getScanner().getProduct()).getName());
            this.setScannerVersion(plan.getScanner().getVersion());
        }
        this.setPlanId(plan.getId());
        this.setPlanName(plan.getName());
        this.setPolicyId(plan.getPolicyId());
        this.setResult(ScanResult.RESULT_SCANNING);
        this.setScanType(plan.getScanType());
        this.setBuiltIn(plan.getBuiltIn());
        if (plan.getScanType() == ScanPlan.SCAN_TYPE_BY_DEPT) {
            this.setScanDeptName(plan.getScanDept().stream().map(Dept::getName).collect(Collectors.toList()));
        }
    }

    /**
     * 状态转中文
     *
     * @return 返回中文
     */
    public String switchResultStr() {
        switch (this.result) {
            case RESULT_SCANNING: {
                return RESULT_SCANNING_STR;
            }
            case RESULT_SUCCESS: {
                return RESULT_SUCCESS_STR;
            }
            case RESULT_FAIL: {
                return RESULT_FAIL_STR;
            }
            case RESULT_CANCEL: {
                return RESULT_CANCEL_STR;
            }
            case RESULT_FAIL_PROJECT_RESTART: {
                return RESULT_FAIL_PROJECT_RESTART_STR;
            }
            case RESULT_FAIL_TIME_OUT: {
                return RESULT_FAIL_TIME_OUT_STR;
            }
            default: {
                return RESULT_DEFAULT_STR;
            }
        }
    }
}
