package com.cumulus.modules.business.vulnerability.entity.es;

import com.cumulus.modules.business.entity.Asset;
import com.cumulus.modules.business.vulnerability.common.model.BuiltInVulReceiveModel;
import com.cumulus.modules.system.entity.User;
import com.cumulus.utils.SecurityUtils;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.apache.commons.lang3.StringUtils;
import org.springframework.data.annotation.Id;
import org.springframework.data.elasticsearch.annotations.Document;
import org.springframework.data.elasticsearch.annotations.Field;
import org.springframework.data.elasticsearch.annotations.FieldType;

import java.io.Serializable;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * 风险对象 ES
 *
 * @author : shenjc
 */
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Document(indexName = "vulnerability")
public class VulnerabilityEs implements Serializable {
    private static final long serialVersionUID = -7037172498821531939L;

    /**
     * 用于区分主机和web漏洞
     */
    public static final String IP_AND_WEBSITE_DISTINGUISH_CHAR = ":";

    /**
     * 默认的CVSS分数字段
     */
    public static final String DEFAULT_CVSS_SCORE = "-";

    /**
     * 漏洞描述 重复
     */
    public static final String DETAIL_KEY_DESCRIPTION = "description";

    /**
     * 漏洞影响 ？
     */
    public static final String DETAIL_KEY_IMPACT = "impact";

    /**
     * 解决方案
     */
    public static final String DETAIL_KEY_SOLUTION = "solution";

    /**
     * 可信度 cvss分值
     */
    public static final String DETAIL_KEY_CVSS_SCORE = "cvssScore";

    /**
     * 可信度 cvss3分值
     */
    public static final String DETAIL_KEY_CVSS3_SCORE = "cvss3Score";

    /**
     * 可信度 cvss2分值
     */
    public static final String DETAIL_KEY_CVSS2_SCORE = "cvss2Score";

    /**
     * CVE编号
     */
    public static final String DETAIL_KEY_CVE_NUMBER = "cveNumber";

    /**
     * CNVD编号
     */
    public static final String DETAIL_KEY_CNVD_NUMBER = "cnvdNumber";

    /**
     * CNNVD编号
     */
    public static final String DETAIL_KEY_CNNVD_NUMBER = "cnnvdNumber";

    /**
     * 唯一标识
     */
    public static final String DETAIL_KEY_CVE_IDENTIFYING = "identifying";

    /**
     * 漏洞类型（不用管）
     */
    public static final String DETAIL_KEY_VUL_TYPE = "vulType";

    /**
     * channel（不用管）
     */
    private static final String DETAIL_KEY_CHANNEL = "channel";

    /**
     * 漏洞细节 ？
     */
    public static final String DETAIL_KEY_DETAILS = "details";

    /**
     * 漏洞危害 ？
     */
    public static final String DETAIL_KEY_HAZARD = "hazard";

    /**
     * 漏洞危害 ？
     */
    private static final String DETAIL_KEY_PARTICULARS = "particulars";

    /**
     * 修复建议 ？
     */
    public static final String DETAIL_KEY_REPAIR_SUGGESTIONS = "repairSuggestions";

    /**
     * 漏洞类别 主机
     */
    public static final int CATEGORY_HOST = 1;

    /**
     * 漏洞类别 应用
     */
    public static final int CATEGORY_WEB = 2;

    /**
     * 风险等级 低
     */
    public static final int RISK_LEVEL_LOW = 1;

    /**
     * 风险等级 中
     */
    public static final int RISK_LEVEL_MID = 2;

    /**
     * 风险等级 高
     */
    public static final int RISK_LEVEL_HIGH = 3;

    /**
     * 漏洞来源 报告
     */
    public static final int SOURCE_REPORT = 1;

    /**
     * 漏洞来源 模板
     */
    public static final int SOURCE_TEMPLATE = 2;

    /**
     * 漏洞来源 手动
     */
    public static final int SOURCE_MANUAL = 3;

    /**
     * 漏洞来源 漏洞扫描
     */
    public static final int SOURCE_SCAN_BUILT_IN = 4;

    /**
     * 漏洞来源 第三方漏扫
     */
    public static final int SOURCE_SCAN_THIRD_PARTY = 5;

    /**
     * 待下发
     */
    public static final int HANDLE_STATUS_TO_BE_ISSUED = 0;

    /**
     * 待修复
     */
    public static final int HANDLE_STATUS_TO_REPAIR = 1;

    /**
     * 待复测
     */
    public static final int HANDLE_STATUS_TO_RETEST = 2;

    /**
     * 已修复 （已修复+已忽略=待关闭）
     */
    public static final int HANDLE_STATUS_REPAIR = 3;

    /**
     * 已忽略 （已修复+已忽略=待关闭）
     */
    public static final int HANDLE_STATUS_IGNORED = 4;

    /**
     * 关闭
     */
    public static final int HANDLE_STATUS_CLOSED = 5;


    /**
     * ID
     */
    @Id
    private String id;

    /**
     * ip
     */
    @Field(type = FieldType.Keyword)
    private String ip;

    /**
     * 端口
     */
    @Field(type = FieldType.Keyword)
    private String port;

    /**
     * 风险名称
     */
    @Field(type = FieldType.Keyword)
    private String name;

    /**
     * 风险归属
     */
    @Field(type = FieldType.Keyword)
    private String deptName;

    /**
     * 风险编号 CVE > CVND > CVNND
     */
    @Field(type = FieldType.Keyword)
    private String vulNumber;

    /**
     * 风险来源 应该有枚举
     */
    @Field(type = FieldType.Integer)
    private Integer source;

    /**
     * 处置状态
     */
    @Field(type = FieldType.Integer)
    private Integer handleStatus;

    /**
     * 当前处理状态的用户id
     */
    @Field(type = FieldType.Long)
    private Long handleUser;

    /**
     * 发现时间
     */
    @Field(type = FieldType.Date)
    private Date findTime;

    /**
     * 风险级别
     */
    @Field(type = FieldType.Integer)
    private Integer riskLevel;

    /**
     * 风险类型 1、主机漏洞 2、网址漏洞
     */
    @Field(type = FieldType.Integer)
    private Integer vulCategory;

    /**
     * 资产ID
     */
    @Field(type = FieldType.Keyword)
    private String assetId;

    /**
     * 风险细节
     */
    @Field(type = FieldType.Object)
    private Map<String, Object> detail;

    /**
     * 最新一次扫描结果
     */
    @Field(type = FieldType.Boolean)
    private Boolean latest;

    /**
     * 创建人
     */
    @Field(type = FieldType.Keyword)
    private String createBy;

    /**
     * 更新人
     */
    @Field(type = FieldType.Keyword)
    private String updateBy;

    /**
     * 创建时间
     */
    @Field(type = FieldType.Date)
    private Date createTime;

    /**
     * 更新时间
     */
    @Field(type = FieldType.Date)
    private Date updateTime;

    /**
     * 最新处置时间
     */
    @Field(type = FieldType.Date)
    private Date manageTime;

    public VulnerabilityEs(Asset asset, BuiltInVulReceiveModel.VulInfo vulInfo, Integer vulCategory) {
        String userName;
        Date now = new Date();
        try {
            userName = SecurityUtils.getCurrentUsername();
        } catch (Exception e) {
            userName = User.DEFAULT_SUPER_MANAGER_NAME;
        }
        this.createBy = userName;
        this.updateBy = userName;
        this.createTime = now;
        this.updateTime = now;
        this.latest = true;
        this.ip = asset.getIp();
        this.assetId = String.valueOf(asset.getId());
        this.port = asset.getPort() == null ? null : String.valueOf(asset.getPort());
        this.name = vulInfo.getName();
        this.deptName = asset.getDept() == null ? null : asset.getDept().getName();
        if (StringUtils.isBlank(vulInfo.getCve())) {
            if (StringUtils.isNotBlank(vulInfo.getCnnvd())) {
                this.vulNumber = vulInfo.getCnnvd();
            }
        } else {
            this.vulNumber = vulInfo.getCve();
        }
        this.source = SOURCE_SCAN_BUILT_IN;
        this.handleStatus = HANDLE_STATUS_TO_BE_ISSUED;
        this.findTime = now;
        if (StringUtils.isNotBlank(vulInfo.getLevel())) {
            switch (vulInfo.getLevel()) {
                case BuiltInVulReceiveModel.RISK_LEVEL_SUPPER:
                case BuiltInVulReceiveModel.RISK_LEVEL_HIGH: {
                    this.riskLevel = RISK_LEVEL_HIGH;
                    break;
                }
                case BuiltInVulReceiveModel.RISK_LEVEL_MIDDLE: {
                    this.riskLevel = RISK_LEVEL_MID;
                    break;
                }
                default: {
                    this.riskLevel = RISK_LEVEL_LOW;
                    break;
                }
            }
        } else {
            this.riskLevel = RISK_LEVEL_LOW;
        }
        this.vulCategory = vulCategory;
        this.detail = new HashMap<>(8);
        if (StringUtils.isNotBlank(vulInfo.getCvss3())) {
            this.detail.put(DETAIL_KEY_CVSS_SCORE, vulInfo.getCvss3());
        } else {
            this.detail.put(DETAIL_KEY_CVSS_SCORE, vulInfo.getCvss2());
        }
        this.detail.put(DETAIL_KEY_CHANNEL, vulInfo.getChannel());
        this.detail.put(DETAIL_KEY_CNNVD_NUMBER, vulInfo.getCnnvd());
        this.detail.put(DETAIL_KEY_CVE_NUMBER, vulInfo.getCve());
        this.detail.put(DETAIL_KEY_CVSS2_SCORE, vulInfo.getCvss2());
        this.detail.put(DETAIL_KEY_CVSS3_SCORE, vulInfo.getCvss3());
        this.detail.put(DETAIL_KEY_DESCRIPTION, vulInfo.getDescription());
        this.detail.put(DETAIL_KEY_CVE_IDENTIFYING, vulInfo.getHash());
        this.detail.put(DETAIL_KEY_SOLUTION, vulInfo.getSolution());
        this.detail.put(DETAIL_KEY_VUL_TYPE, vulInfo.getVulType());
    }
}
