package com.cumulus.modules.business.service.impl;

import java.sql.Timestamp;
import java.time.LocalDateTime;

import com.cumulus.modules.business.entity.CountVulnerability;
import com.cumulus.modules.business.repository.CountVulnerabilityRepository;
import com.cumulus.modules.business.service.CountVulnerabilityService;
import com.cumulus.modules.business.vulnerability.entity.es.VulnerabilityEs;
import com.cumulus.utils.DateUtils;


import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * 风险统计服务实现
 *
 * @author Shijh
 */
@Slf4j
@Service
public class CountVulnerabilityServiceImpl implements CountVulnerabilityService {

    /**
     * 风险统计数据访问接口
     */
    @Autowired
    private CountVulnerabilityRepository countVulnerabilityRepository;

    /**
     * 资产服务实现
     */
    @Autowired
    private AssetServiceImpl assetService;

    /**
     * 获取风险统计数
     */
    @Transactional(rollbackFor = Exception.class)
    public void findCountVul() {
        long countHigh = assetService.getCountVulLatest(VulnerabilityEs.RISK_LEVEL_HIGH);
        long countMiddle = assetService.getCountVulLatest(VulnerabilityEs.RISK_LEVEL_MID);
        long countLow = assetService.getCountVulLatest(VulnerabilityEs.RISK_LEVEL_LOW);
        long countHost = assetService.getCountVul(VulnerabilityEs.CATEGORY_HOST);
        long countWeb = assetService.getCountVul(VulnerabilityEs.CATEGORY_WEB);
        CountVulnerability countFlaw = new CountVulnerability();
        countFlaw.setLowRiskNum(Integer.valueOf(String.valueOf(countLow)));
        countFlaw.setInDangerNum(Integer.valueOf(String.valueOf(countMiddle)));
        countFlaw.setHighNum(Integer.valueOf(String.valueOf(countHigh)));
        countFlaw.setHostVul(Integer.valueOf(String.valueOf(countHost)));
        countFlaw.setAppVul(Integer.valueOf(String.valueOf(countWeb)));
        countFlaw.setDataTime(DateUtils.localDateTimeFormatyMd(LocalDateTime.now()));
        countFlaw.setCreateTime((new Timestamp(System.currentTimeMillis())));
        countFlaw.setUpdateTime((new Timestamp(System.currentTimeMillis())));
        this.countVulnerabilityRepository.save(countFlaw);
        if (log.isInfoEnabled()) {
            log.info("Risk statistics successful");
        }
    }
}
