package com.cumulus.modules.business.vulnerability.controller;

import java.util.List;
import javax.servlet.http.HttpServletResponse;
import com.cumulus.modules.business.dto.BatchPackage;
import com.cumulus.modules.business.vulnerability.dto.VulnerabilityDto;
import com.cumulus.modules.business.vulnerability.dto.VulnerabilityQueryDto;
import com.cumulus.modules.business.vulnerability.entity.es.VulnerabilityEs;
import com.cumulus.modules.business.vulnerability.service.VulnerabilityEsService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

/**
 * 漏洞控制层
 *
 * @author zhangxq
 */
@RestController
@RequestMapping(path = "/api/vulnerability")
@Slf4j
public class VulnerabilityController {

    /**
     * 漏洞服务接口
     */
    @Autowired
    private VulnerabilityEsService vulnerabilityEsService;

    /**
     * 高级查询
     *
     * @param dto 查询参数
     * @return 漏洞列表
     */
    @PreAuthorize("@auth.check('vulnerabilitiesList', 'riskDisposal')")
    @PostMapping("/query")
    public ResponseEntity<Object> query(@RequestBody VulnerabilityQueryDto dto, Pageable pageable) {
        dto.setPageable(pageable);
        return new ResponseEntity<>(vulnerabilityEsService.query(dto, false), HttpStatus.OK);
    }

    /**
     * 上传excel
     *
     * @param file excel
     * @return 解析结果
     */
    @PreAuthorize("@auth.check('vulnerabilityAdd')")
    @PostMapping("/upload")
    public ResponseEntity<Object> upload(MultipartFile file) {
        return new ResponseEntity<>(vulnerabilityEsService.upload(file), HttpStatus.OK);
    }

    /**
     * 批量导入
     *
     * @param list 待添加漏洞列表
     * @return 添加结果
     */
    @PreAuthorize("@auth.check('vulnerabilityAdd')")
    @PostMapping("/createBatch")
    public ResponseEntity<Object> createBatch(@RequestBody List<VulnerabilityDto> list) {
        return new ResponseEntity<>(vulnerabilityEsService.importVulnerability(list), HttpStatus.OK);
    }

    /**
     * 手动单个添加
     *
     * @param vulnerabilityEs 漏洞对象
     * @return 添加结果
     */
    @PreAuthorize("@auth.check('vulnerabilityAdd')")
    @PostMapping("/create")
    public ResponseEntity<Object> create(@RequestBody VulnerabilityEs vulnerabilityEs) {
        vulnerabilityEsService.create(vulnerabilityEs);
        return new ResponseEntity<>("添加成功", HttpStatus.OK);
    }

    /**
     * 导出excel
     *
     * @return excel
     */
    @PreAuthorize("@auth.check('vulnerabilitiesList')")
    @PostMapping("/export")
    public void export(@RequestBody BatchPackage.BatchPackageString batchPackage, HttpServletResponse response) {
        vulnerabilityEsService.export(batchPackage.getIds(), batchPackage.isAll(), batchPackage.getName(), response);
    }

    /**
     * 漏洞清单统计
     *
     * @param vulCategory 漏洞类型
     * @return 统计对象
     */
    @PreAuthorize("@auth.check('vulnerabilitiesList')")
    @GetMapping("/count")
    public ResponseEntity<Object> count(@RequestParam Integer vulCategory) {
        return new ResponseEntity<>(vulnerabilityEsService.countVulnerability(vulCategory), HttpStatus.OK);
    }

    /**
     * 根据id查找
     *
     * @param id id
     * @return 漏洞对象
     */
    @PreAuthorize("@auth.check('vulnerabilitiesList', 'riskDisposal')")
    @GetMapping("/get")
    public ResponseEntity<Object> count(@RequestParam String id) {
        return new ResponseEntity<>(vulnerabilityEsService.findById(id), HttpStatus.OK);
    }

    /**
     * 根据ip查询
     *
     * @param dto
     * @param pageable
     * @return
     */
    @PostMapping("/findByIp")
    public ResponseEntity<Object> findByIp(@RequestBody VulnerabilityQueryDto dto, Pageable pageable) {
        return new ResponseEntity<>(vulnerabilityEsService.findByIp(dto.getIp(), pageable), HttpStatus.OK);
    }
}
