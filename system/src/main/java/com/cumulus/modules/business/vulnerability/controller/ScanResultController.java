package com.cumulus.modules.business.vulnerability.controller;

import com.cumulus.constant.FileConstant;
import com.cumulus.enums.DetailedFileTypeEnum;
import com.cumulus.exception.BadRequestException;
import com.cumulus.modules.business.vulnerability.entity.ScanResult;
import com.cumulus.modules.business.vulnerability.repository.ScanResultRepository;
import com.cumulus.modules.business.vulnerability.service.ScanResultService;
import com.cumulus.modules.system.entity.DetailedFile;
import com.cumulus.modules.system.service.DetailedFileService;
import com.cumulus.utils.CommonUtils;
import com.cumulus.utils.StringUtils;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.transaction.Transactional;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * 扫描结果控制层
 *
 * @author : shenjc
 */
@RestController
@RequestMapping(path = "/api/vulnerability/result")
@Slf4j
@PreAuthorize("@auth.check('vulScan')")
public class ScanResultController {

    /**
     * 漏洞结果服务类`
     */
    @Autowired
    private ScanResultService scanResultService;

    /**
     * 漏洞结果数据接口
     */
    @Autowired
    private ScanResultRepository scanResultRepository;

    /**
     * 明细请放单服务类
     */
    @Autowired
    private DetailedFileService detailedFileService;

    /**
     * 根据参数查询漏洞扫描计划
     *
     * @param pageable 分页参数
     * @param params   查询参数
     * @return 漏洞扫描计划
     */
    @PostMapping
    public ResponseEntity<?> getPage(Pageable pageable,
                                     @RequestBody Map<String, String> params) {
        return new ResponseEntity<>(scanResultService.page(pageable, CommonUtils.mapToMultiValueMap(params)), HttpStatus.OK);
    }

    /**
     * 获取漏扫报告
     *
     * @param scanResultId 扫描历史记录的id
     */
    @PostMapping("/getVulReport")
    public ResponseEntity<Object> getVulReport(Long scanResultId, HttpServletRequest request, HttpServletResponse response) {
        scanResultService.downloadVulReport(scanResultId, request, response);
        return new ResponseEntity<>(HttpStatus.OK);
    }

    /**
     * 导出excel
     *
     * @param name      明细清单的名称
     * @param exportAll 是否导出全部
     * @param idList    不导出全部的话导出那些id
     * @return excel
     */
    @PostMapping("/export")
    @Transactional(rollbackOn = Exception.class)
    public ResponseEntity<Object> exportExcel(String name, Boolean exportAll, @RequestBody(required = false) List<Long> idList) {
        if (StringUtils.isBlank(name)) {
            throw new BadRequestException("导出失败,文件名为空");
        }
        List<ScanResult> resultList = new ArrayList<>();
        if (exportAll == null || !exportAll) {
            if (idList != null && !idList.isEmpty()) {
                resultList = scanResultRepository.findAllById(idList);
            }
        } else {
            resultList = scanResultRepository.findAllByResultNot(ScanResult.RESULT_SCANNING);
        }
        if (resultList.isEmpty()) {
            throw new BadRequestException("导出失败,未找到记录");
        }
        DetailedFile detailedFile = detailedFileService.saveDetailedFile(DetailedFileTypeEnum.SCAN_RESULT, name, FileConstant.ZIP_SUFFIX_ZIP);
        boolean zip = scanResultService.exportZip(resultList, detailedFileService.getDetailedFilePathById(detailedFile.getId()));
        if (!zip) {
            throw new BadRequestException("导出失败,没有文件存在");
        }
        detailedFileService.updateDetailedFileDone(detailedFile.getId());
        return new ResponseEntity<>(HttpStatus.OK);
    }
}
