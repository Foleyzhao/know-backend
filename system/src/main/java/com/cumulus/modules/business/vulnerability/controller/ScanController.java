package com.cumulus.modules.business.vulnerability.controller;

import com.cumulus.enums.ScanProduct;
import com.cumulus.exception.BadRequestException;
import com.cumulus.modules.business.vulnerability.entity.Scan;
import com.cumulus.modules.business.vulnerability.service.ScanService;
import com.cumulus.utils.CommonUtils;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.Map;

/**
 * 漏洞扫描器控制层
 *
 * @author zhaoff
 */
@RestController
@RequestMapping(path = "/api/vulnerability/scan")
@Slf4j
@PreAuthorize("@auth.check('vulScan')")
public class ScanController {

    /**
     * 漏洞扫描器服务接口
     */
    @Autowired
    private ScanService scanService;

    /**
     * 查询单个扫描器基本信息
     *
     * @param id 扫描器ID
     * @return 扫描器信息
     */
    @PostMapping(path = "/{id}")
    public ResponseEntity<?> getVulnerabilityScanById(@PathVariable("id") Long id) {
        if (null == id) {
            if (log.isInfoEnabled()) {
                log.info("扫描器 id 不能为空");
            }
            throw new BadRequestException("查询失败");
        }
        Scan scan = scanService.findById(id);
        return ResponseEntity.ok(scan);
    }

    /**
     * 分页获取扫描器数据 ? 后跟 Pageable body 放 params
     *
     * @param pageable 分页参数
     * @param params   查询参数
     * @return 扫描器数据
     */
    @PostMapping
    public ResponseEntity<?> list(Pageable pageable,
                                  @RequestBody Map<String, String> params) {
        return new ResponseEntity<>(scanService.list(pageable, CommonUtils.mapToMultiValueMap(params)), HttpStatus.OK);
    }

    /**
     * 修改扫描器
     *
     * @param newScan 新扫描器
     * @return 结果响应
     */
    @PostMapping(path = "/editScan")
    public ResponseEntity<?> editVulnerabilityScan(@RequestBody Scan newScan) {
        scanService.editScan(newScan);
        return new ResponseEntity<>(HttpStatus.OK);
    }

    /**
     * 删除扫描器
     *
     * @param scan 要删除的扫描器
     * @return 结果响应
     */
    @DeleteMapping(path = "/deleteScan/{id}")
    public ResponseEntity<?> delVulnerabilityScan(@PathVariable("id") Scan scan) {
        if (null == scan.getId()) {
            if (log.isInfoEnabled()) {
                log.info("扫描器 id 不能为空");
            }
            throw new BadRequestException("删除失败");
        }
        scanService.deleteScanner(scan);
        return new ResponseEntity<>(HttpStatus.OK);
    }

    /**
     * 新增扫描器
     *
     * @param scan 扫描器
     * @return 结果响应
     */
    @PostMapping(path = "/addScan")
    public ResponseEntity<?> addVulnerabilityScan(@RequestBody Scan scan) {
        scanService.addScan(scan);
        return new ResponseEntity<>(HttpStatus.OK);
    }

    /**
     * 查询资管支持接入的第三方漏扫类型
     *
     * @return 支持接入的第三方漏扫类型
     */
    @PostMapping(path = "/scanType")
    public ResponseEntity<?> getVulnerabilityScanType() {
        return ResponseEntity.ok(ScanProduct.getScanTypeList());
    }

    /**
     * 根据扫描器类型获取支持的扫描器版本
     *
     * @return 支持接入的扫描器版本
     */
    @PostMapping(path = "/scanProductVersion/{id}")
    public ResponseEntity<?> getVulnerabilityScanVersion(@PathVariable("id") Integer id) {
        return ResponseEntity.ok(ScanProduct.getById(id).getVersion());
    }
}
